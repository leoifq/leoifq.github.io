{"version":3,"file":"static/js/112.3f046e72.js","mappings":"iPAYY,MAACA,EAAwB,CACnCC,WAAY,CACVC,KAAMC,MACNC,QAAS,IAAM,IAEjBC,SAAUC,QACVC,IAAK,CACHL,KAAMM,OACNJ,aAAS,GAEXK,IAAK,CACHP,KAAMM,OACNJ,aAAS,GAEXM,KAAMC,EAAAA,GACNC,GAAI,CACFV,KAAMW,OACNT,aAAS,GAEXU,MAAO,CACLZ,KAAMW,OACNT,aAAS,GAEXW,KAAM,CACJb,KAAMW,OACNT,aAAS,GAEXY,UAAW,CACTd,KAAMW,OACNT,aAAS,GAEXa,IAAK,CACHf,KAAMW,OACNT,QAAS,QAGAc,EAAgB,CAC3BjB,WAAY,CACVC,KAAM,CAACM,OAAQK,OAAQP,SACvBF,QAAS,QAEXU,MAAO,CACLZ,KAAM,CAACW,OAAQP,QAASE,OAAQW,SAElCC,cAAed,QACfD,SAAUC,QACVe,QAASf,QACTgB,KAAM,CACJpB,KAAMW,OACNT,aAAS,GAEXmB,UAAW,CACTrB,KAAM,CAACW,OAAQL,QACfJ,aAAS,GAEXoB,WAAY,CACVtB,KAAM,CAACW,OAAQL,QACfJ,aAAS,GAEXQ,GAAI,CACFV,KAAMW,OACNT,aAAS,GAEXqB,SAAU,CACRvB,KAAMW,OACNT,aAAS,GAEXsB,OAAQpB,QACRI,KAAMC,EAAAA,GACNgB,SAAU,CAACd,OAAQL,SAERoB,EAAmB,KAC9B,MAAMC,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,EAAgB,IAChCC,GAAaF,EAAAA,EAAAA,IAAOG,EAAAA,EAAoB,IACxCC,GAAgBJ,EAAAA,EAAAA,IAAO,gBAAiB,IACxCK,GAAUC,EAAAA,EAAAA,KAAS,IAAMF,GAA2E,qBAAxC,MAAjBA,OAAwB,EAASA,EAAcZ,QAC1Fe,GAAiBD,EAAAA,EAAAA,KAAS,IACvBJ,EAAWtB,OAEpB,MAAO,CACLyB,UACAD,gBACAL,SACAQ,iBACAL,eAGSM,EAAqB,CAACC,GAASP,iBAC1C,MAAQQ,QAASC,EAAX,oBAAoBC,IAAwBC,EAAAA,EAAAA,GAAmBJ,EAAO,CAC1EK,gBAAiBZ,IAEnB,MAAO,CACLU,sBACAD,YAGEI,EAAYN,IAChB,MAAMO,GAAYC,EAAAA,EAAAA,KAAI,IAChB,KAAEC,IAASC,EAAAA,EAAAA,OACX,QAAEd,EAAF,cAAWD,EAAX,WAA0BF,GAAeJ,IACzCsB,GAAkBH,EAAAA,EAAAA,KAAI,GACtBI,GAAQf,EAAAA,EAAAA,IAAS,CACrBgB,MACE,IAAIC,EAAIC,EACR,OAAOnB,EAAQoB,MAA2C,OAAlCF,EAAKnB,EAAcjC,iBAAsB,EAASoD,EAAGE,MAAmC,OAA1BD,EAAKf,EAAMtC,YAAsBqD,EAAKR,EAAUS,OAExIC,IAAIC,GACF,IAAIJ,EACAlB,EAAQoB,OAASpD,MAAMuD,QAAQD,IACjCP,EAAgBK,WAA8B,IAAtBrB,EAAczB,KAAkBgD,EAAIE,OAASzB,EAAczB,IAAI8C,OAC7D,IAA1BL,EAAgBK,QAAyF,OAApEF,EAAsB,MAAjBnB,OAAwB,EAASA,EAAc0B,cAAgCP,EAAGQ,KAAK3B,EAAeuB,MAEhJT,EAAKc,EAAAA,GAAoBL,GACzBX,EAAUS,MAAQE,MAIxB,MAAO,CACLN,QACAhB,UACAe,kBACAlB,eAGE+B,EAAoB,CAACxB,EAAOyB,GAASb,YACzC,MAAM,QAAEhB,EAAF,cAAWD,GAAkBN,IAC7BqC,GAAQlB,EAAAA,EAAAA,KAAI,GACZrC,GAAOwD,EAAAA,EAAAA,IAAyB,MAAjBhC,OAAwB,EAASA,EAAciC,kBAAmB,CAAEC,MAAM,IACzFC,GAAYjC,EAAAA,EAAAA,KAAS,KACzB,MAAMmB,EAAQJ,EAAMI,MACpB,MAA4B,sBAAxBe,EAAAA,EAAAA,IAAaf,GACRA,EACEpD,MAAMuD,QAAQH,GAChBA,EAAMgB,SAAShC,EAAMzB,OACT,OAAVyC,QAA4B,IAAVA,EACpBA,IAAUhB,EAAMhB,YAEdgC,KAGPiB,GAAeN,EAAAA,EAAAA,KAAQ9B,EAAAA,EAAAA,KAAS,KACpC,IAAIiB,EACJ,OAAOlB,EAAQoB,MAAmF,OAA1EF,EAAsB,MAAjBnB,OAAwB,EAASA,EAAciC,wBAA6B,EAASd,EAAGE,WAAQ,MAEzHkB,GAAcrC,EAAAA,EAAAA,KAAS,OACjB4B,EAAM5D,UAAWmC,EAAMzB,SAEnC,MAAO,CACLuD,YACAJ,QACAvD,OACA8D,eACAC,gBAGEC,EAAc,CAACnC,GACnBY,QACAkB,gBAEA,MAAM,OAAExC,EAAF,QAAUM,EAAV,cAAmBD,GAAkBN,IACrC+C,GAAkBvC,EAAAA,EAAAA,KAAS,KAC/B,IAAIiB,EAAIC,EACR,MAAM7C,EAAkC,OAA3B4C,EAAKnB,EAAczB,UAAe,EAAS4C,EAAGE,MACrDhD,EAAkC,OAA3B+C,EAAKpB,EAAc3B,UAAe,EAAS+C,EAAGC,MAC3D,SAAU9C,IAAOF,IAAQ4C,EAAMI,MAAMI,QAAUlD,IAAQ4D,EAAUd,OAASJ,EAAMI,MAAMI,QAAUpD,GAAO8D,EAAUd,SAE7GqB,GAAaxC,EAAAA,EAAAA,KAAS,KAC1B,IAAIiB,EAAIC,EACR,MAAMjD,EAAWkC,EAAMlC,WAAuB,MAAVwB,OAAiB,EAASA,EAAOxB,UACrE,OAA6I,OAArIiD,EAAKnB,EAAQoB,OAA0C,OAAhCF,EAAKnB,EAAc7B,eAAoB,EAASgD,EAAGE,QAAUlD,GAAYsE,EAAgBpB,MAAQlD,IAAoBiD,KAEtJ,MAAO,CACLsB,aACAD,oBAGEE,EAAgB,CAACtC,GAASY,YAC9B,SAAS2B,IACH3E,MAAMuD,QAAQP,EAAMI,SAAWJ,EAAMI,MAAMgB,SAAShC,EAAMzB,OAC5DqC,EAAMI,MAAMwB,KAAKxC,EAAMzB,OAEvBqC,EAAMI,MAAQhB,EAAMhB,YAAa,EAGrCgB,EAAMlB,SAAWyD,KAEbE,EAAW,CAACzC,GAChBY,QACAD,kBACAuB,cACAG,aACAlC,0BAEA,MAAM,WAAEV,GAAeJ,KACjB,KAAEoB,IAASC,EAAAA,EAAAA,MACjB,SAASgC,EAAgB1B,GACvB,IAAIF,EAAIC,EACR,OAAOC,IAAUhB,EAAMhB,YAAuB,IAAVgC,EAA2C,OAAzBF,EAAKd,EAAMhB,YAAqB8B,EAAuC,OAA1BC,EAAKf,EAAMf,aAAsB8B,EAEtI,SAAS4B,EAAgB7D,EAAS8D,GAChCnC,EAAK,SAAUiC,EAAgB5D,GAAU8D,GAE3C,SAASC,EAAaD,GACpB,GAAIjC,EAAgBK,MAClB,OACF,MAAM8B,EAASF,EAAEE,OACjBrC,EAAK,SAAUiC,EAAgBI,EAAOhE,SAAU8D,GAElD,eAAeG,EAAYH,GACrBjC,EAAgBK,OAEfkB,EAAYlB,OAAUqB,EAAWrB,QAASb,EAAoBa,QACjEJ,EAAMI,MAAQ0B,EAAgB,EAAC,EAAO1C,EAAMf,YAAY+C,SAASpB,EAAMI,cACjEgC,EAAAA,EAAAA,MACNL,EAAgB/B,EAAMI,MAAO4B,IAOjC,OAJAK,EAAAA,EAAAA,KAAM,IAAMjD,EAAMtC,aAAY,KAC5B,IAAIoD,EACwD,OAA3DA,EAAmB,MAAdrB,OAAqB,EAASA,EAAWyD,WAA6BpC,EAAGQ,KAAK7B,EAAY,UAAU0D,OAAOC,IAAQC,EAAAA,EAAAA,GAAUD,QAE9H,CACLP,eACAE,gBAGSO,EAAgB,CAC3B,CAAC/B,EAAAA,IAAsBL,IAAQqC,EAAAA,EAAAA,IAASrC,KAAQsC,EAAAA,EAAAA,IAAStC,KAAQuC,EAAAA,EAAAA,IAAUvC,GAC3EwC,OAASxC,IAAQqC,EAAAA,EAAAA,IAASrC,KAAQsC,EAAAA,EAAAA,IAAStC,KAAQuC,EAAAA,EAAAA,IAAUvC,IAElDyC,EAAqB,CAChC,CAACpC,EAAAA,IAAsBL,IAAQC,EAAAA,EAAAA,IAAQD,GACvCwC,OAASxC,IAAQC,EAAAA,EAAAA,IAAQD,IAEd0C,EAAc,CAAC5D,EAAOyB,KACjC,MAAM,MAAEb,EAAF,QAAShB,EAAT,gBAAkBe,EAAlB,WAAmClB,GAAea,EAASN,IAC3D,MAAE0B,EAAF,KAASvD,EAAT,UAAe2D,EAAf,aAA0BG,EAA1B,YAAwCC,GAAgBV,EAAkBxB,EAAOyB,EAAO,CAC5Fb,WAEI,WAAEyB,GAAeF,EAAYnC,EAAO,CAAEY,QAAOkB,eAC7C,QAAE7B,EAAF,oBAAWE,IAAwBC,EAAAA,EAAAA,GAAmBJ,EAAO,CACjEK,gBAAiBZ,EACjBoE,oBAAqB3B,EACrB4B,oBAAqBlE,KAEjB,aAAEiD,EAAF,YAAgBE,GAAgBN,EAASzC,EAAO,CACpDY,QACAD,kBACAuB,cACAG,aACAlC,wBAGF,OADAmC,EAActC,EAAO,CAAEY,UAChB,CACLnB,aACAQ,UACAE,sBACA2B,YACAO,aACAzC,UACAqC,eACAC,cACAtB,QACAiC,eACAE,cACArB,QACAvD,S,0RC1MEsD,GAAQ,WAER,QACNxB,EADA,oBAEAE,EAFA,UAGA2B,EAHA,WAIAO,EAJA,aAKAJ,EALA,YAMAC,EANA,MAOAtB,EAPA,aAQAiC,EARA,YASAE,EATA,MAUArB,GACAkC,EAAAA,EAAAA,GAEMG,GAAK,OAAa,Y,qzEC1BlBtC,GAAQ,WAER,MAANC,EAAAA,UAAAI,EAAAA,WAAAO,EAAAA,KAAAlE,EAAAA,MAAAyC,EAAAA,aAAAiC,GAAA,EACA,EACApB,IAEM,cAAN9B,GAAA,IACMoE,GAAK,OAAa,YAElBC,GAAc,SAAQ,KAC5B,YACA,4EACA,CACAC,gBAAAA,EACAC,YAAAA,EACAC,MAAAA,OAAAA,EAAAA,OAAAA,EAAAA,MAAAA,OAAAA,EAAAA,EAAAA,gBAAAA,EAAAA,EAAAA,OAAAA,EAAAA,GACAC,UAAAA,EAAAA,cAAAA,SAAAA,M,ukDCjDM,WAAN3E,GAAA,KACM,QAANS,EAAAA,oBAAAC,GAAA,KACAV,eAEMmC,GAAoB,UACpBmC,GAAK,OAAa,YAElB1C,EAAc,IACpBZ,EAAAA,EAAAA,GAAAA,IACAuC,EAAAA,EAAAA,KAAAA,KACAvC,EAAAA,SAAAA,OAIM/C,GAAa,QAAS,CAC5BmD,MACA,qBAEAI,IAAAA,GACAI,EAAAA,M,OAIAgD,EAAAA,EAAAA,IAAQ,gBAADA,CACPtF,KAAAA,kBACArB,iBACA,WACAkE,oBACAP,iBAIA4B,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,aACA,KACA,MAEA,mE,geChEY,MAACqB,GAAaC,EAAAA,EAAAA,IAAYC,EAAU,CAC9CC,eAD8C,EAE9CC,cAAAA,KAG8BC,EAAAA,EAAAA,IAAgBF,IACjBE,EAAAA,EAAAA,IAAgBD,I,uICTnC,MAACE,GAAqBC,EAAAA,EAAAA,IAAW,CAC3CC,OAAQ,CACNnH,KAAMI,QACNF,SAAS,GAEXkH,UAAW,CACTpH,KAAMqH,EAAAA,GACNnH,QAAS,IAEXoH,YAAa,CACXtH,KAAMW,OACNT,QAAS,IAEXqH,UAAW,CACTvH,KAAMI,QACNF,SAAS,GAEXsH,WAAY,CACVxH,KAAMI,QACNF,SAAS,GAEXuH,UAAW,CACTzH,KAAMI,QACNF,SAAS,GAEXwH,MAAO,CACL1H,KAAMW,OACNT,QAAS,MAGAyH,EAAqB,CAChCC,MAAO,KAAM,I,4HC7BH,MAACC,GAAcX,EAAAA,EAAAA,IAAW,IACjCD,EAAAA,EACHa,aAAc,CACZ9H,KAAMI,QACNF,SAAS,GAEX6H,YAAa,CACX/H,MAAMgI,EAAAA,EAAAA,IAAeC,WAEvBC,eAAgB,CACdlI,KAAMI,QACNF,SAAS,GAEXiI,kBAAmB,CACjBnI,KAAMI,QACNF,SAAS,GAEXkI,mBAAoB,CAClBpI,KAAMI,QACNF,SAAS,GAEXmI,WAAY,CACVrI,KAAMI,QACNF,SAAS,GAEXoI,MAAO,CACLtI,KAAMI,QACNF,SAAS,GAEXqI,UAAW,CACTvI,KAAMM,OACNJ,QAAS,GAEXsI,WAAY,CACVxI,KAAMM,OACNJ,QAAS,GAEXuI,IAAK,CACHzI,KAAMW,QAERZ,WAAY,CACVC,KAAMI,QACNsI,UAAU,GAEZC,WAAYhI,OACZiI,MAAO,CACL5I,KAAM,CAACW,OAAQL,SAEjBuI,OAAQ,CACN7I,KAAMM,QAERwI,UAAW,CACT9I,KAAMI,QACNF,SAAS,KAGA6I,EAAc,CACzBC,KAAM,KAAM,EACZC,OAAQ,KAAM,EACdrB,MAAO,KAAM,EACbsB,OAAQ,KAAM,EACd,CAACtF,EAAAA,IAAsBP,IAAUyC,EAAAA,EAAAA,IAAUzC,GAC3C8F,cAAe,KAAM,EACrBC,eAAgB,KAAM,I,4JChDZ,MAACC,EAAY,CAAChH,EAAOiH,KAC/B,MAAMC,GAAWxG,EAAAA,EAAAA,MACXD,EAAOyG,EAASzG,MAChB,WAAE0G,IAAeC,EAAAA,EAAAA,KACvB,IAAIC,EAAe,GACnB,MAAMC,GAAUC,EAAAA,EAAAA,KACVC,GAASD,EAAAA,EAAAA,KACTE,GAAUjH,EAAAA,EAAAA,KAAI,GACdqG,GAASrG,EAAAA,EAAAA,KAAI,GACbkH,GAAWlH,EAAAA,EAAAA,KAAI,GACfgG,GAAShG,EAAAA,EAAAA,IAAIR,EAAMwG,QAAUW,KACnC,IAAIQ,EACAC,EACJ,MAAMC,GAAiBhI,EAAAA,EAAAA,KAAS,KAAM2D,EAAAA,EAAAA,IAASxD,EAAMuG,OAAU,GAAEvG,EAAMuG,UAAYvG,EAAMuG,QACnFuB,GAAYC,EAAAA,EAAAA,GAAgB,YAAaC,EAAAA,GACzCC,GAAQpI,EAAAA,EAAAA,KAAS,KACrB,MAAMqI,EAAS,GACTC,EAAa,KAAIL,EAAU9G,eASjC,OARKhB,EAAMmF,aACLnF,EAAMoG,MACR8B,EAAQ,GAAEC,gBAA0BnI,EAAMoG,KAExCpG,EAAMuG,QACR2B,EAAQ,GAAEC,WAAqBN,EAAe7G,QAG3CkH,KAET,SAASE,IACP3H,EAAK,UAEP,SAAS4H,IACP5H,EAAK,UACLA,EAAKc,EAAAA,IAAoB,GACrBvB,EAAM6F,iBACR6B,EAAS1G,OAAQ,GAGrB,SAASsH,IACP7H,EAAK,SAEP,SAASkG,IACO,MAAdiB,GAA8BA,IACjB,MAAbD,GAA6BA,IACzB3H,EAAMkG,WAAalG,EAAMkG,UAAY,IAEpCqC,KAAMZ,IAAca,EAAAA,EAAAA,KAAa,IAAMC,KAAUzI,EAAMkG,YAE1DuC,IAGJ,SAASlD,IACM,MAAboC,GAA6BA,IACf,MAAdC,GAA8BA,IAC1B5H,EAAMmG,YAAcnG,EAAMmG,WAAa,IAEtCoC,KAAMX,IAAeY,EAAAA,EAAAA,KAAa,IAAME,KAAW1I,EAAMmG,aAE5DuC,IAGJ,SAASC,IACP,SAASC,EAAKC,GACRA,IAEJhC,EAAO7F,OAAQ,EACfyG,EAAQzG,OAAQ,GAEdhB,EAAM0F,YACR1F,EAAM0F,YAAYkD,GAElBrD,IAGJ,SAASuD,IACH9I,EAAM8F,mBACR6C,IAGJ,SAASF,IACFM,EAAAA,KAELtB,EAAQzG,OAAQ,GAElB,SAAS0H,IACPjB,EAAQzG,OAAQ,EAElB,SAASgI,IACPvI,EAAK,iBAEP,SAASwI,IACPxI,EAAK,kBAKP,SAASyI,IACHlJ,EAAM+F,oBACR4C,IAsCJ,OA3CI3I,EAAMgG,aACRmD,EAAAA,EAAAA,GAAc1B,IAOhBxE,EAAAA,EAAAA,KAAM,IAAMjD,EAAMtC,aAAawD,IACzBA,GACF2F,EAAO7F,OAAQ,EACf2F,IACAe,EAAS1G,OAAQ,EACjBP,EAAK,QACL+F,EAAOxF,MAAQhB,EAAMwG,OAASA,EAAOxF,QAAUmG,KAC/CnE,EAAAA,EAAAA,KAAS,KACHiE,EAAUjG,QACZiG,EAAUjG,MAAMoI,UAAY,OAI5B3B,EAAQzG,OACVuE,QAINtC,EAAAA,EAAAA,KAAM,IAAMjD,EAAMmF,aAAajE,IACxB+F,EAAUjG,QAEXE,GACFmG,EAAeJ,EAAUjG,MAAMiH,MAAMoB,UACrCpC,EAAUjG,MAAMiH,MAAMoB,UAAY,IAElCpC,EAAUjG,MAAMiH,MAAMoB,UAAYhC,OAGtCiC,EAAAA,EAAAA,KAAU,KACJtJ,EAAMtC,aACR+J,EAAQzG,OAAQ,EAChB0G,EAAS1G,OAAQ,EACjB2F,QAGG,CACLyB,aACAC,aACAC,cACAK,cACAG,eACAvD,QACAmD,UACAM,kBACAC,mBACAC,mBACA5B,UACAE,SACAX,SACAoB,QACAP,WACAD,UACAjB,Y","sources":["webpack://cocogoat-web/../../../../../packages/components/checkbox/src/checkbox.ts","webpack://cocogoat-web/../../../../../packages/components/checkbox/src/checkbox.vue","webpack://cocogoat-web/../../../../../packages/components/checkbox/src/checkbox-button.vue","webpack://cocogoat-web/../../../../../packages/components/checkbox/src/checkbox-group.vue","webpack://cocogoat-web/../../../../../packages/components/checkbox/index.ts","webpack://cocogoat-web/../../../../../packages/components/dialog/src/dialog-content.ts","webpack://cocogoat-web/../../../../../packages/components/dialog/src/dialog.ts","webpack://cocogoat-web/../../../../../packages/components/dialog/src/use-dialog.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, nextTick, ref, watch } from 'vue'\nimport { toTypeString } from '@vue/shared'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useFormItemInputId, useSize, useSizeProp } from '@element-plus/hooks'\nimport {\n  debugWarn,\n  isArray,\n  isBoolean,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport type { ComponentInternalInstance, ExtractPropTypes, PropType } from 'vue'\nimport type { FormContext, FormItemContext } from '@element-plus/tokens'\nimport type { ICheckboxGroupInstance } from './checkbox.type'\nimport type Checkbox from './checkbox.vue'\n\nexport const useCheckboxGroupProps = {\n  modelValue: {\n    type: Array as PropType<Array<string | number>>,\n    default: () => [],\n  },\n  disabled: Boolean,\n  min: {\n    type: Number,\n    default: undefined,\n  },\n  max: {\n    type: Number,\n    default: undefined,\n  },\n  size: useSizeProp,\n  id: {\n    type: String,\n    default: undefined,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  fill: {\n    type: String,\n    default: undefined,\n  },\n  textColor: {\n    type: String,\n    default: undefined,\n  },\n  tag: {\n    type: String,\n    default: 'div',\n  },\n}\n\nexport type IUseCheckboxGroupProps = ExtractPropTypes<\n  typeof useCheckboxGroupProps\n>\n\nexport const checkboxProps = {\n  modelValue: {\n    type: [Number, String, Boolean],\n    default: () => undefined,\n  },\n  label: {\n    type: [String, Boolean, Number, Object],\n  },\n  indeterminate: Boolean,\n  disabled: Boolean,\n  checked: Boolean,\n  name: {\n    type: String,\n    default: undefined,\n  },\n  trueLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  falseLabel: {\n    type: [String, Number],\n    default: undefined,\n  },\n  id: {\n    type: String,\n    default: undefined,\n  },\n  controls: {\n    type: String,\n    default: undefined,\n  },\n  border: Boolean,\n  size: useSizeProp,\n  tabindex: [String, Number],\n}\n\nexport const useCheckboxGroup = () => {\n  const elForm = inject(formContextKey, {} as FormContext)\n  const elFormItem = inject(formItemContextKey, {} as FormItemContext)\n  const checkboxGroup = inject<ICheckboxGroupInstance>('CheckboxGroup', {})\n  const isGroup = computed(\n    () => checkboxGroup && checkboxGroup?.name === 'ElCheckboxGroup'\n  )\n  const elFormItemSize = computed(() => {\n    return elFormItem.size\n  })\n  return {\n    isGroup,\n    checkboxGroup,\n    elForm,\n    elFormItemSize,\n    elFormItem,\n  }\n}\n\nexport const useCheckboxGroupId = (\n  props: IUseCheckboxGroupProps,\n  { elFormItem }: Partial<ReturnType<typeof useCheckboxGroup>>\n) => {\n  const { inputId: groupId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n  })\n\n  return {\n    isLabeledByFormItem,\n    groupId,\n  }\n}\n\nconst useModel = (props: CheckboxProps) => {\n  const selfModel = ref<any>(false)\n  const { emit } = getCurrentInstance()!\n  const { isGroup, checkboxGroup, elFormItem } = useCheckboxGroup()\n  const isLimitExceeded = ref(false)\n  const model = computed({\n    get() {\n      return isGroup.value\n        ? checkboxGroup.modelValue?.value\n        : props.modelValue ?? selfModel.value\n    },\n\n    set(val: unknown) {\n      if (isGroup.value && Array.isArray(val)) {\n        isLimitExceeded.value =\n          checkboxGroup.max !== undefined &&\n          val.length > checkboxGroup.max.value\n        isLimitExceeded.value === false && checkboxGroup?.changeEvent?.(val)\n      } else {\n        emit(UPDATE_MODEL_EVENT, val)\n        selfModel.value = val\n      }\n    },\n  })\n\n  return {\n    model,\n    isGroup,\n    isLimitExceeded,\n    elFormItem,\n  }\n}\n\nconst useCheckboxStatus = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots'],\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  const { isGroup, checkboxGroup } = useCheckboxGroup()\n  const focus = ref(false)\n  const size = useSize(checkboxGroup?.checkboxGroupSize, { prop: true })\n  const isChecked = computed<boolean>(() => {\n    const value = model!.value\n    if (toTypeString(value) === '[object Boolean]') {\n      return value\n    } else if (Array.isArray(value)) {\n      return value.includes(props.label)\n    } else if (value !== null && value !== undefined) {\n      return value === props.trueLabel\n    } else {\n      return !!value\n    }\n  })\n\n  const checkboxSize = useSize(\n    computed(() =>\n      isGroup.value ? checkboxGroup?.checkboxGroupSize?.value : undefined\n    )\n  )\n\n  const hasOwnLabel = computed<boolean>(() => {\n    return !!(slots.default || props.label)\n  })\n\n  return {\n    isChecked,\n    focus,\n    size,\n    checkboxSize,\n    hasOwnLabel,\n  }\n}\n\nconst useDisabled = (\n  props: CheckboxProps,\n  {\n    model,\n    isChecked,\n  }: Partial<ReturnType<typeof useModel>> &\n    Partial<ReturnType<typeof useCheckboxStatus>>\n) => {\n  const { elForm, isGroup, checkboxGroup } = useCheckboxGroup()\n  const isLimitDisabled = computed(() => {\n    const max = checkboxGroup.max?.value!\n    const min = checkboxGroup.min?.value!\n    return (\n      (!!(max || min) && model!.value.length >= max && !isChecked!.value) ||\n      (model!.value.length <= min && isChecked!.value)\n    )\n  })\n  const isDisabled = computed(() => {\n    const disabled = props.disabled || elForm?.disabled\n    return (\n      (isGroup.value\n        ? checkboxGroup.disabled?.value || disabled || isLimitDisabled.value\n        : disabled) ?? false\n    )\n  })\n\n  return {\n    isDisabled,\n    isLimitDisabled,\n  }\n}\n\nconst setStoreValue = (\n  props: CheckboxProps,\n  { model }: Partial<ReturnType<typeof useModel>>\n) => {\n  function addToStore() {\n    if (Array.isArray(model!.value) && !model!.value.includes(props.label)) {\n      model!.value.push(props.label)\n    } else {\n      model!.value = props.trueLabel || true\n    }\n  }\n  props.checked && addToStore()\n}\n\nconst useEvent = (\n  props: CheckboxProps,\n  {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  }: Partial<\n    ReturnType<typeof useModel> &\n      ReturnType<typeof useCheckboxStatus> &\n      ReturnType<typeof useDisabled> &\n      ReturnType<typeof useFormItemInputId>\n  >\n) => {\n  const { elFormItem } = useCheckboxGroup()\n  const { emit } = getCurrentInstance()!\n\n  function getLabeledValue(value: string | number | boolean) {\n    return value === props.trueLabel || value === true\n      ? props.trueLabel ?? true\n      : props.falseLabel ?? false\n  }\n\n  function emitChangeEvent(\n    checked: string | number | boolean,\n    e: InputEvent | MouseEvent\n  ) {\n    emit('change', getLabeledValue(checked), e)\n  }\n\n  function handleChange(e: Event) {\n    if (isLimitExceeded!.value) return\n    const target = e.target as HTMLInputElement\n    emit('change', getLabeledValue(target.checked), e)\n  }\n\n  async function onClickRoot(e: MouseEvent) {\n    if (isLimitExceeded!.value) return\n    if (\n      !hasOwnLabel!.value &&\n      !isDisabled!.value &&\n      isLabeledByFormItem!.value\n    ) {\n      model!.value = getLabeledValue(\n        [false, props.falseLabel].includes(model!.value)\n      )\n      await nextTick()\n      emitChangeEvent(model!.value, e)\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    () => {\n      elFormItem?.validate?.('change').catch((err) => debugWarn(err))\n    }\n  )\n\n  return {\n    handleChange,\n    onClickRoot,\n  }\n}\n\ntype CheckboxValueType = string | number | boolean\n\nexport const checkboxEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n  change: (val: CheckboxValueType) =>\n    isString(val) || isNumber(val) || isBoolean(val),\n}\n\nexport const checkboxGroupEmits = {\n  [UPDATE_MODEL_EVENT]: (val: CheckboxValueType[]) => isArray(val),\n  change: (val: CheckboxValueType[]) => isArray(val),\n}\n\nexport const useCheckbox = (\n  props: CheckboxProps,\n  slots: ComponentInternalInstance['slots']\n) => {\n  const { model, isGroup, isLimitExceeded, elFormItem } = useModel(props)\n  const { focus, size, isChecked, checkboxSize, hasOwnLabel } =\n    useCheckboxStatus(props, slots, {\n      model,\n    })\n  const { isDisabled } = useDisabled(props, { model, isChecked })\n  const { inputId, isLabeledByFormItem } = useFormItemInputId(props, {\n    formItemContext: elFormItem,\n    disableIdGeneration: hasOwnLabel,\n    disableIdManagement: isGroup,\n  })\n  const { handleChange, onClickRoot } = useEvent(props, {\n    model,\n    isLimitExceeded,\n    hasOwnLabel,\n    isDisabled,\n    isLabeledByFormItem,\n  })\n\n  setStoreValue(props, { model })\n\n  return {\n    elFormItem,\n    inputId,\n    isLabeledByFormItem,\n    isChecked,\n    isDisabled,\n    isGroup,\n    checkboxSize,\n    hasOwnLabel,\n    model,\n    handleChange,\n    onClickRoot,\n    focus,\n    size,\n  }\n}\n\nexport type CheckboxProps = ExtractPropTypes<typeof checkboxProps>\nexport type CheckboxEmits = typeof checkboxEmits\nexport type CheckboxInstance = InstanceType<typeof Checkbox>\n","<template>\n  <component\n    :is=\"!hasOwnLabel && isLabeledByFormItem ? 'span' : 'label'\"\n    :class=\"[\n      ns.b(),\n      ns.m(checkboxSize),\n      ns.is('disabled', isDisabled),\n      ns.is('bordered', border),\n      ns.is('checked', isChecked),\n    ]\"\n    :aria-controls=\"indeterminate ? controls : null\"\n    @click=\"onClickRoot\"\n  >\n    <span\n      :class=\"[\n        ns.e('input'),\n        ns.is('disabled', isDisabled),\n        ns.is('checked', isChecked),\n        ns.is('indeterminate', indeterminate),\n        ns.is('focus', focus),\n      ]\"\n      :tabindex=\"indeterminate ? 0 : undefined\"\n      :role=\"indeterminate ? 'checkbox' : undefined\"\n      :aria-checked=\"indeterminate ? 'mixed' : undefined\"\n    >\n      <input\n        v-if=\"trueLabel || falseLabel\"\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueLabel\"\n        :false-value=\"falseLabel\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n      />\n      <input\n        v-else\n        :id=\"inputId\"\n        v-model=\"model\"\n        :class=\"ns.e('original')\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :disabled=\"isDisabled\"\n        :value=\"label\"\n        :name=\"name\"\n        :tabindex=\"tabindex\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\"\n      />\n      <span :class=\"ns.e('inner')\" />\n    </span>\n    <span v-if=\"hasOwnLabel\" :class=\"ns.e('label')\">\n      <slot />\n      <template v-if=\"!$slots.default\">{{ label }}</template>\n    </span>\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { checkboxEmits, checkboxProps, useCheckbox } from './checkbox'\n\ndefineOptions({\n  name: 'ElCheckbox',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst {\n  inputId,\n  isLabeledByFormItem,\n  isChecked,\n  isDisabled,\n  checkboxSize,\n  hasOwnLabel,\n  model,\n  handleChange,\n  onClickRoot,\n  focus,\n} = useCheckbox(props, slots)\n\nconst ns = useNamespace('checkbox')\n</script>\n","<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.bm('button', size),\n      ns.is('disabled', isDisabled),\n      ns.is('checked', isChecked),\n      ns.is('focus', focus),\n    ]\"\n  >\n    <input\n      v-if=\"trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueLabel\"\n      :false-value=\"falseLabel\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"label\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  checkboxEmits,\n  checkboxProps,\n  useCheckbox,\n  useCheckboxGroup,\n} from './checkbox'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst { focus, isChecked, isDisabled, size, model, handleChange } = useCheckbox(\n  props,\n  slots\n)\nconst { checkboxGroup } = useCheckboxGroup()\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n</script>\n","<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'checkbox-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? elFormItem.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport {\n  checkboxGroupEmits,\n  useCheckboxGroup,\n  useCheckboxGroupId,\n  useCheckboxGroupProps,\n} from './checkbox'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(useCheckboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\n\nconst { elFormItem } = useCheckboxGroup()\nconst { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {\n  elFormItem,\n})\nconst checkboxGroupSize = useSize()\nconst ns = useNamespace('checkbox')\n\nconst changeEvent = (value) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => {\n    emit('change', value)\n  })\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val) {\n    changeEvent(val)\n  },\n})\n\nprovide('CheckboxGroup', {\n  name: 'ElCheckboxGroup',\n  modelValue,\n  ...toRefs(props),\n  checkboxGroupSize,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    elFormItem.validate?.('change').catch((err) => debugWarn(err))\n  }\n)\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\n\nimport Checkbox from './src/checkbox.vue'\nimport CheckboxButton from './src/checkbox-button.vue'\nimport CheckboxGroup from './src/checkbox-group.vue'\n\nexport const ElCheckbox = withInstall(Checkbox, {\n  CheckboxButton,\n  CheckboxGroup,\n})\nexport default ElCheckbox\n\nexport const ElCheckboxButton = withNoopInstall(CheckboxButton)\nexport const ElCheckboxGroup = withNoopInstall(CheckboxGroup)\n\nexport * from './src/checkbox'\nexport * from './src/checkbox.type'\n","import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  center: {\n    type: Boolean,\n    default: false,\n  },\n  closeIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  customClass: {\n    type: String,\n    default: '',\n  },\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n","import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false,\n  },\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false,\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  top: {\n    type: String,\n  },\n  modelValue: {\n    type: Boolean,\n    required: true,\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number],\n  },\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n","import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useGlobalConfig,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isNumber } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const normalizeWidth = computed(() =>\n    isNumber(props.width) ? `${props.width}px` : props.width\n  )\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog`\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = normalizeWidth.value\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n"],"names":["useCheckboxGroupProps","modelValue","type","Array","default","disabled","Boolean","min","Number","max","size","useSizeProp","id","String","label","fill","textColor","tag","checkboxProps","Object","indeterminate","checked","name","trueLabel","falseLabel","controls","border","tabindex","useCheckboxGroup","elForm","inject","formContextKey","elFormItem","formItemContextKey","checkboxGroup","isGroup","computed","elFormItemSize","useCheckboxGroupId","props","inputId","groupId","isLabeledByFormItem","useFormItemInputId","formItemContext","useModel","selfModel","ref","emit","getCurrentInstance","isLimitExceeded","model","get","_a","_b","value","set","val","isArray","length","changeEvent","call","UPDATE_MODEL_EVENT","useCheckboxStatus","slots","focus","useSize","checkboxGroupSize","prop","isChecked","toTypeString","includes","checkboxSize","hasOwnLabel","useDisabled","isLimitDisabled","isDisabled","setStoreValue","addToStore","push","useEvent","getLabeledValue","emitChangeEvent","e","handleChange","target","onClickRoot","nextTick","watch","validate","catch","err","debugWarn","checkboxEmits","isString","isNumber","isBoolean","change","checkboxGroupEmits","useCheckbox","disableIdGeneration","disableIdManagement","ns","activeStyle","backgroundColor","borderColor","color","boxShadow","provide","ElCheckbox","withInstall","Checkbox","CheckboxButton","CheckboxGroup","withNoopInstall","dialogContentProps","buildProps","center","closeIcon","iconPropType","customClass","draggable","fullscreen","showClose","title","dialogContentEmits","close","dialogProps","appendToBody","beforeClose","definePropType","Function","destroyOnClose","closeOnClickModal","closeOnPressEscape","lockScroll","modal","openDelay","closeDelay","top","required","modalClass","width","zIndex","trapFocus","dialogEmits","open","opened","closed","openAutoFocus","closeAutoFocus","useDialog","targetRef","instance","nextZIndex","useZIndex","lastPosition","titleId","useId","bodyId","visible","rendered","openTimer","closeTimer","normalizeWidth","namespace","useGlobalConfig","defaultNamespace","style","style2","varPrefix","afterEnter","afterLeave","beforeLeave","stop","useTimeoutFn","doOpen","doClose","handleClose","hide","shouldCancel","onModalClick","isClient","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","useLockscreen","scrollTop","transform","onMounted"],"sourceRoot":""}