{"version":3,"file":"static/js/1840.62e25478.js","mappings":"2FAGA,MAAMA,EAAgB,CAACC,EAASC,IAAYC,KAAKC,MAAOD,KAAKE,UAAYH,EAAUD,EAAU,GAAMA,GAE7FK,EAAmB,KACxB,MAAMC,EAAQ,IAAIC,MAAM,iBAExB,OADAD,EAAME,KAAO,aACNF,GAGFG,EAAc,EAAEC,aAAcC,EAAcC,WAAYC,EAAKC,iBAAiB,CAACC,GAAKC,QAAOC,UAAU,MAC1G,GAAIA,GAAUA,EAAOC,QACpB,OAAOC,QAAQC,OAAOf,KAGvB,IAAIgB,EACAC,EACAC,EACJ,MAAMC,EAAQb,GAAgBD,aAExBe,EAAiB,KACtBD,EAAMH,GACNE,EAASlB,MAGJqB,EAAU,KACXT,GACHA,EAAOU,oBAAoB,QAASF,IAIhCG,EAAe,IAAIT,SAAQ,CAACU,EAAST,KAC1CE,EAAS,KACRI,IACIZ,EACHe,EAAQb,GAERI,EAAOJ,IAITO,EAAWH,EACXC,GAAaR,GAAOD,YAAYU,EAAQP,MAazC,OAVIE,GACHA,EAAOa,iBAAiB,QAASL,EAAgB,CAACM,MAAM,IAGzDH,EAAaJ,MAAQ,KACpBA,EAAMH,GACNA,EAAY,KACZC,KAGMM,GAGFI,EAAmBC,IACxB,MAAMC,EAAQzB,EAAY,IAAIwB,EAAanB,aAAa,IAGxD,OAFAoB,EAAMd,OAASX,EAAY,IAAIwB,EAAanB,aAAa,IACzDoB,EAAMC,MAAQ,CAACnC,EAASC,EAASmC,IAAYF,EAAMnC,EAAcC,EAASC,GAAUmC,GAC7EF,GAGFA,EAAQF,IACdE,EAAMF,iBAAmBA,EAEzBK,EAAOC,QAAUJ,EAEjBG,EAAOC,QAAPD,WAAyBH,G,kDCrEzB,MAAMK,EACFC,cACIC,QAAQC,KAAK,uBAEJ,gBACT,MAAO,CAAEC,SAAS,EAAMC,OAAQ,IAE1B,aACN,MAAO,CACHC,KAAM,QACNrC,KAAM,QACNsC,OAAQ,GACRC,QAAS,CAAC,EAAG,IAGZ,UACLC,EACAhC,GACA,UAAEiC,EAAF,SAAaC,IAOb,aAFMhB,IAAM,KACZO,QAAQC,KAAK,kBAAmBM,EAAKhC,EAAO,CAAEiC,YAAWC,aAClD,CACHlC,QACAmC,aAAcD,GAGb,UAACF,GAON,OAFAP,QAAQC,KAAK,kBAAmBM,SAC1Bd,IAAM,KACL,CACHlB,MAAO,KACPmC,aAAc,IAAIC,KAAK,IAGlB,gBACT,MAAO,IAGf","sources":["webpack://cocogoat-web/./node_modules/.pnpm/delay@5.0.0/node_modules/delay/index.js","webpack://cocogoat-web/./node_modules/.pnpm/ifdef-loader@2.3.2/node_modules/ifdef-loader/ifdef-loader.js"],"sourcesContent":["'use strict';\n\n// From https://github.com/sindresorhus/random-int/blob/c37741b56f76b9160b0b63dae4e9c64875128146/index.js#L13-L15\nconst randomInteger = (minimum, maximum) => Math.floor((Math.random() * (maximum - minimum + 1)) + minimum);\n\nconst createAbortError = () => {\n\tconst error = new Error('Delay aborted');\n\terror.name = 'AbortError';\n\treturn error;\n};\n\nconst createDelay = ({clearTimeout: defaultClear, setTimeout: set, willResolve}) => (ms, {value, signal} = {}) => {\n\tif (signal && signal.aborted) {\n\t\treturn Promise.reject(createAbortError());\n\t}\n\n\tlet timeoutId;\n\tlet settle;\n\tlet rejectFn;\n\tconst clear = defaultClear || clearTimeout;\n\n\tconst signalListener = () => {\n\t\tclear(timeoutId);\n\t\trejectFn(createAbortError());\n\t};\n\n\tconst cleanup = () => {\n\t\tif (signal) {\n\t\t\tsignal.removeEventListener('abort', signalListener);\n\t\t}\n\t};\n\n\tconst delayPromise = new Promise((resolve, reject) => {\n\t\tsettle = () => {\n\t\t\tcleanup();\n\t\t\tif (willResolve) {\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\treject(value);\n\t\t\t}\n\t\t};\n\n\t\trejectFn = reject;\n\t\ttimeoutId = (set || setTimeout)(settle, ms);\n\t});\n\n\tif (signal) {\n\t\tsignal.addEventListener('abort', signalListener, {once: true});\n\t}\n\n\tdelayPromise.clear = () => {\n\t\tclear(timeoutId);\n\t\ttimeoutId = null;\n\t\tsettle();\n\t};\n\n\treturn delayPromise;\n};\n\nconst createWithTimers = clearAndSet => {\n\tconst delay = createDelay({...clearAndSet, willResolve: true});\n\tdelay.reject = createDelay({...clearAndSet, willResolve: false});\n\tdelay.range = (minimum, maximum, options) => delay(randomInteger(minimum, maximum), options);\n\treturn delay;\n};\n\nconst delay = createWithTimers();\ndelay.createWithTimers = createWithTimers;\n\nmodule.exports = delay;\n// TODO: Remove this for the next major release\nmodule.exports.default = delay;\n","import delay from 'delay'\n\nclass DebugSyncProvider {\n    constructor() {\n        console.info('DEBUG-SYNC: created')\n    }\n    async enabled() {\n        return { enabled: true, reason: '' }\n    }\n    async info(): Promise<{ user: string; name: string; avatar: string; storage: number[] }> {\n        return {\n            user: 'debug',\n            name: 'debug',\n            avatar: '',\n            storage: [0, 0],\n        }\n    }\n    async set(\n        key: string,\n        value: unknown,\n        { localLast, localNow }: { localLast: Date; localNow: Date },\n    ): Promise<{\n        value: unknown\n        lastModified: Date\n    }> {\n        await delay(100)\n        console.info('DEBUG-SYNC: set', key, value, { localLast, localNow })\n        return {\n            value,\n            lastModified: localNow,\n        }\n    }\n    async get(key: string): Promise<{\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        value: any\n        lastModified: Date\n    }> {\n        console.info('DEBUG-SYNC: get', key)\n        await delay(100)\n        return {\n            value: null,\n            lastModified: new Date(0),\n        }\n    }\n    async loadAll() {\n        return {}\n    }\n}\nexport default DebugSyncProvider\n"],"names":["randomInteger","minimum","maximum","Math","floor","random","createAbortError","error","Error","name","createDelay","clearTimeout","defaultClear","setTimeout","set","willResolve","ms","value","signal","aborted","Promise","reject","timeoutId","settle","rejectFn","clear","signalListener","cleanup","removeEventListener","delayPromise","resolve","addEventListener","once","createWithTimers","clearAndSet","delay","range","options","module","exports","DebugSyncProvider","constructor","console","info","enabled","reason","user","avatar","storage","key","localLast","localNow","lastModified","Date"],"sourceRoot":""}