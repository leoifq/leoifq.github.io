{"version":3,"file":"static/js/7703.09786256.js","mappings":"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","sources":["webpack://cocogoat-web/./node_modules/.pnpm/ifdef-loader@2.3.2/node_modules/ifdef-loader/ifdef-loader.js","webpack://cocogoat-web/./src/components/Scanner/Router.vue?89ec","webpack://cocogoat-web/./src/components/Scanner/Router.vue","webpack://cocogoat-web/./src/components/Scanner/Router.vue?142c","webpack://cocogoat-web/./src/views/AchievementScanner/Index.vue?0e58","webpack://cocogoat-web/./src/views/AchievementScanner/Index.vue","webpack://cocogoat-web/./src/views/AchievementScanner/Index.vue?ba80","webpack://cocogoat-web/../../src/comlink.ts","webpack://cocogoat-web/./node_modules/.pnpm/lodash-es@4.17.21/node_modules/lodash-es/cloneDeep.js"],"sourcesContent":["import { Remote, wrap } from 'comlink'\nimport type { W } from './scanner.worker.expose'\nimport resources from '@/resources'\nimport { requireAsBlob, speedTest } from '@/resource-main'\nimport { WorkerMacro } from '@/utils/corsWorker'\nimport { hasSIMD } from '@/utils/compatibility'\nimport achevementsAmos from '@/generated/amos-data/amos/achievements/index'\nimport { i18n } from '@/i18n'\nimport { cloneDeep } from 'lodash-es'\nexport function createWorker() {\n    const _worker = WorkerMacro(()=>{\nconsole.log('[worker-macro] webpack');\nreturn new WorkerMacro(new URL(\"./scanner.worker.expose.ts\", import.meta.url))\n})\n    const worker = wrap(_worker) as Remote<typeof W>\n    return { worker, _worker }\n}\nexport function initScanner() {\n    const { worker: workerCV, _worker: w1 } = createWorker()\n    const { worker: workerOCR, _worker: w2 } = createWorker()\n    const { scannerOnImage, scannerOnLine: scannerOnLine2, recognizeAchievement: recognizeAchievement2 } = workerCV\n    const { recognizeAchievement, scannerOnLine } = workerOCR\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let progressHandler = (progress: number, error?: Error) => {\n        // do nothing\n    }\n    const onProgress = (handler: (progress: number, error?: Error) => unknown) => {\n        progressHandler = handler\n    }\n    const workerErrorHandler = (e: ErrorEvent) => {\n        progressHandler(-99)\n        throw e\n    }\n    w1.addEventListener('error', workerErrorHandler)\n    w2.addEventListener('error', workerErrorHandler)\n    const initPromise = (async () => {\n        try {\n            const [race, all] = speedTest()\n            const ortWasm = hasSIMD ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm'\n            const ocvWasm = hasSIMD ? 'opencv-simd.wasm' : 'opencv-normal.wasm'\n            await race\n            await requireAsBlob([ortWasm, ocvWasm, 'ppocr.ort'], (e) => progressHandler(e), all)\n            const i18nAmos = cloneDeep(i18n.amos)\n            await Promise.all([\n                workerCV.setResources(resources),\n                workerOCR.setResources(resources),\n                workerCV.initAchievementMap(achevementsAmos, i18nAmos),\n                workerOCR.initAchievementMap(achevementsAmos, i18nAmos),\n            ])\n            progressHandler(100)\n        } catch (e) {\n            progressHandler(-1, e as Error)\n            throw e\n        }\n        w1.removeEventListener('error', workerErrorHandler)\n        w2.removeEventListener('error', workerErrorHandler)\n        await Promise.all([workerCV.init(), workerOCR.init()])\n    })()\n    return {\n        recognizeAchievement,\n        recognizeAchievement2,\n        scannerOnLine,\n        scannerOnLine2,\n        scannerOnImage,\n        initPromise,\n        workerCV,\n        workerOCR,\n        onProgress,\n    }\n}\nlet scannerInstance: ReturnType<typeof initScanner>\nexport function getScannerInstance() {\n    if (!scannerInstance) {\n        scannerInstance = initScanner()\n    }\n    return scannerInstance\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  const _component_Loader = _resolveComponent(\"Loader\");\n\n  return _ctx.done ? (_openBlock(), _createBlock(_component_router_view, {\n    key: 0\n  })) : (_openBlock(), _createBlock(_component_Loader, {\n    key: 1,\n    source: _ctx.source,\n    instance: _ctx.instance,\n    onDone: _cache[0] || (_cache[0] = $event => _ctx.done = true)\n  }, null, 8, [\"source\", \"instance\"]));\n}","import { ref, defineComponent } from 'vue';\nimport Loader from '@/components/Scanner/Loader.vue';\nexport default defineComponent({\n  components: {\n    Loader\n  },\n  props: {\n    source: {\n      type: String,\n      required: true\n    },\n    instance: {\n      type: Function,\n      required: true\n    }\n  },\n\n  setup() {\n    return {\n      done: ref(false)\n    };\n  }\n\n});","/* unplugin-vue-components disabled */import { render } from \"./Router.vue?vue&type=template&id=547080d0&ts=true\"\nimport script from \"./Router.vue?vue&type=script&lang=ts\"\nexport * from \"./Router.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/runner/work/cocogoat/cocogoat/node_modules/.pnpm/vue-loader@17.0.0_webpack@5.73.0/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Router = _resolveComponent(\"Router\");\n\n  return _openBlock(), _createBlock(_component_Router, {\n    source: \"achievement\",\n    instance: _ctx.getScannerInstance\n  }, null, 8, [\"instance\"]);\n}","import { defineComponent } from 'vue';\nimport Router from '@/components/Scanner/Router.vue';\nimport { getScannerInstance } from './scanner/scanner.worker';\nexport default defineComponent({\n  components: {\n    Router\n  },\n\n  setup() {\n    return {\n      getScannerInstance\n    };\n  }\n\n});","/* unplugin-vue-components disabled */import { render } from \"./Index.vue?vue&type=template&id=f7ace4d6&ts=true\"\nimport script from \"./Index.vue?vue&type=script&lang=ts\"\nexport * from \"./Index.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/runner/work/cocogoat/cocogoat/node_modules/.pnpm/vue-loader@17.0.0_webpack@5.73.0/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n"],"names":["createWorker","_worker","WorkerMacro","console","log","URL","worker","wrap","initScanner","workerCV","w1","workerOCR","w2","scannerOnImage","scannerOnLine","scannerOnLine2","recognizeAchievement","recognizeAchievement2","progressHandler","progress","error","onProgress","handler","workerErrorHandler","e","addEventListener","initPromise","race","all","speedTest","ortWasm","hasSIMD","ocvWasm","requireAsBlob","i18nAmos","cloneDeep","i18n","Promise","setResources","resources","initAchievementMap","achevementsAmos","removeEventListener","init","scannerInstance","getScannerInstance","render","_ctx","_cache","$props","$setup","$data","$options","_component_router_view","_component_Loader","done","key","source","instance","onDone","$event","components","Loader","props","type","String","required","Function","setup","__exports__","_component_Router","Router","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","proxyTransferHandler","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","throwTransferHandler","value","serialized","Error","isError","message","name","stack","Object","assign","transferHandlers","Map","ep","self","callback","ev","data","id","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfer","undefined","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","closeEndPoint","isMessagePort","endpoint","constructor","close","target","createProxy","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","get","_target","requestResponseMessage","p","toString","length","r","bind","set","_thisArg","rawArgumentList","last","processArguments","construct","myFlat","arr","Array","prototype","concat","processed","v","transferCache","WeakMap","transfers","serializedValue","msg","generateUUID","l","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","CLONE_DEEP_FLAG","CLONE_SYMBOLS_FLAG","baseClone"],"sourceRoot":""}