{"version":3,"file":"static/js/4328.bc6e9b4b.js","mappings":"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","sources":["webpack://cocogoat-web/../../../../../packages/components/loading/src/directive.ts","webpack://cocogoat-web/../../../../../packages/components/loading/src/loading.ts","webpack://cocogoat-web/../../../../../packages/components/loading/src/service.ts","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/util.ts","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/thumb.ts","webpack://cocogoat-web/../../../../packages/tokens/scrollbar.ts","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/thumb.vue","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/bar.ts","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/bar.vue","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/scrollbar.ts","webpack://cocogoat-web/../../../../../packages/components/scrollbar/src/scrollbar.vue","webpack://cocogoat-web/../../../../../packages/components/scrollbar/index.ts"],"sourcesContent":["import { isRef, ref } from 'vue'\nimport { hyphenate, isObject, isString } from '@vue/shared'\nimport { Loading } from './service'\nimport type { Directive, DirectiveBinding, UnwrapRef } from 'vue'\nimport type { LoadingOptions } from './types'\nimport type { LoadingInstance } from './loading'\n\nconst INSTANCE_KEY = Symbol('ElLoading')\n\nexport type LoadingBinding = boolean | UnwrapRef<LoadingOptions>\nexport interface ElementLoading extends HTMLElement {\n  [INSTANCE_KEY]?: {\n    instance: LoadingInstance\n    options: LoadingOptions\n  }\n}\n\nconst createInstance = (\n  el: ElementLoading,\n  binding: DirectiveBinding<LoadingBinding>\n) => {\n  const vm = binding.instance\n\n  const getBindingProp = <K extends keyof LoadingOptions>(\n    key: K\n  ): LoadingOptions[K] =>\n    isObject(binding.value) ? binding.value[key] : undefined\n\n  const resolveExpression = (key: any) => {\n    const data = (isString(key) && vm?.[key]) || key\n    if (data) return ref(data)\n    else return data\n  }\n\n  const getProp = <K extends keyof LoadingOptions>(name: K) =>\n    resolveExpression(\n      getBindingProp(name) ||\n        el.getAttribute(`element-loading-${hyphenate(name)}`)\n    )\n\n  const fullscreen =\n    getBindingProp('fullscreen') ?? binding.modifiers.fullscreen\n\n  const options: LoadingOptions = {\n    text: getProp('text'),\n    svg: getProp('svg'),\n    svgViewBox: getProp('svgViewBox'),\n    spinner: getProp('spinner'),\n    background: getProp('background'),\n    customClass: getProp('customClass'),\n    fullscreen,\n    target: getBindingProp('target') ?? (fullscreen ? undefined : el),\n    body: getBindingProp('body') ?? binding.modifiers.body,\n    lock: getBindingProp('lock') ?? binding.modifiers.lock,\n  }\n  el[INSTANCE_KEY] = {\n    options,\n    instance: Loading(options),\n  }\n}\n\nconst updateOptions = (\n  newOptions: UnwrapRef<LoadingOptions>,\n  originalOptions: LoadingOptions\n) => {\n  for (const key of Object.keys(originalOptions)) {\n    if (isRef(originalOptions[key]))\n      originalOptions[key].value = newOptions[key]\n  }\n}\n\nexport const vLoading: Directive<ElementLoading, LoadingBinding> = {\n  mounted(el, binding) {\n    if (binding.value) {\n      createInstance(el, binding)\n    }\n  },\n  updated(el, binding) {\n    const instance = el[INSTANCE_KEY]\n    if (binding.oldValue !== binding.value) {\n      if (binding.value && !binding.oldValue) {\n        createInstance(el, binding)\n      } else if (binding.value && binding.oldValue) {\n        if (isObject(binding.value))\n          updateOptions(binding.value, instance!.options)\n      } else {\n        instance?.instance.close()\n      }\n    }\n  },\n  unmounted(el) {\n    el[INSTANCE_KEY]?.instance.close()\n  },\n}\n","import {\n  Transition,\n  createApp,\n  createVNode,\n  h,\n  reactive,\n  ref,\n  toRefs,\n  vShow,\n  withCtx,\n  withDirectives,\n} from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { removeClass } from '@element-plus/utils'\n\nimport type { LoadingOptionsResolved } from './types'\n\nexport function createLoadingComponent(options: LoadingOptionsResolved) {\n  let afterLeaveTimer: number\n\n  const ns = useNamespace('loading')\n  const afterLeaveFlag = ref(false)\n  const data = reactive({\n    ...options,\n    originalPosition: '',\n    originalOverflow: '',\n    visible: false,\n  })\n\n  function setText(text: string) {\n    data.text = text\n  }\n\n  function destroySelf() {\n    const target = data.parent\n    if (!target.vLoadingAddClassList) {\n      let loadingNumber: number | string | null =\n        target.getAttribute('loading-number')\n      loadingNumber = Number.parseInt(loadingNumber as any) - 1\n      if (!loadingNumber) {\n        removeClass(target, ns.bm('parent', 'relative'))\n        target.removeAttribute('loading-number')\n      } else {\n        target.setAttribute('loading-number', loadingNumber.toString())\n      }\n      removeClass(target, ns.bm('parent', 'hidden'))\n    }\n    removeElLoadingChild()\n    loadingInstance.unmount()\n  }\n  function removeElLoadingChild(): void {\n    vm.$el?.parentNode?.removeChild(vm.$el)\n  }\n  function close() {\n    if (options.beforeClose && !options.beforeClose()) return\n\n    const target = data.parent\n    target.vLoadingAddClassList = undefined\n    afterLeaveFlag.value = true\n    clearTimeout(afterLeaveTimer)\n\n    afterLeaveTimer = window.setTimeout(() => {\n      if (afterLeaveFlag.value) {\n        afterLeaveFlag.value = false\n        destroySelf()\n      }\n    }, 400)\n    data.visible = false\n\n    options.closed?.()\n  }\n\n  function handleAfterLeave() {\n    if (!afterLeaveFlag.value) return\n    afterLeaveFlag.value = false\n    destroySelf()\n  }\n\n  const elLoadingComponent = {\n    name: 'ElLoading',\n    setup() {\n      return () => {\n        const svg = data.spinner || data.svg\n        const spinner = h(\n          'svg',\n          {\n            class: 'circular',\n            viewBox: data.svgViewBox ? data.svgViewBox : '25 25 50 50',\n            ...(svg ? { innerHTML: svg } : {}),\n          },\n          [\n            h('circle', {\n              class: 'path',\n              cx: '50',\n              cy: '50',\n              r: '20',\n              fill: 'none',\n            }),\n          ]\n        )\n\n        const spinnerText = data.text\n          ? h('p', { class: ns.b('text') }, [data.text])\n          : undefined\n\n        return h(\n          Transition,\n          {\n            name: ns.b('fade'),\n            onAfterLeave: handleAfterLeave,\n          },\n          {\n            default: withCtx(() => [\n              withDirectives(\n                createVNode(\n                  'div',\n                  {\n                    style: {\n                      backgroundColor: data.background || '',\n                    },\n                    class: [\n                      ns.b('mask'),\n                      data.customClass,\n                      data.fullscreen ? 'is-fullscreen' : '',\n                    ],\n                  },\n                  [\n                    h(\n                      'div',\n                      {\n                        class: ns.b('spinner'),\n                      },\n                      [spinner, spinnerText]\n                    ),\n                  ]\n                ),\n                [[vShow, data.visible]]\n              ),\n            ]),\n          }\n        )\n      }\n    },\n  }\n\n  const loadingInstance = createApp(elLoadingComponent)\n  const vm = loadingInstance.mount(document.createElement('div'))\n\n  return {\n    ...toRefs(data),\n    setText,\n    removeElLoadingChild,\n    close,\n    handleAfterLeave,\n    vm,\n    get $el(): HTMLElement {\n      return vm.$el\n    },\n  }\n}\n\nexport type LoadingInstance = ReturnType<typeof createLoadingComponent>\n","import { nextTick } from 'vue'\nimport { isString } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { addClass, getStyle, removeClass } from '@element-plus/utils'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport { createLoadingComponent } from './loading'\nimport type { LoadingInstance } from './loading'\nimport type { LoadingOptionsResolved } from '..'\nimport type { LoadingOptions } from './types'\nimport type { CSSProperties } from 'vue'\n\nlet fullscreenInstance: LoadingInstance | undefined = undefined\n\nexport const Loading = function (\n  options: LoadingOptions = {}\n): LoadingInstance {\n  if (!isClient) return undefined as any\n\n  const resolved = resolveOptions(options)\n\n  if (resolved.fullscreen && fullscreenInstance) {\n    return fullscreenInstance\n  }\n\n  const instance = createLoadingComponent({\n    ...resolved,\n    closed: () => {\n      resolved.closed?.()\n      if (resolved.fullscreen) fullscreenInstance = undefined\n    },\n  })\n\n  addStyle(resolved, resolved.parent, instance)\n  addClassList(resolved, resolved.parent, instance)\n\n  resolved.parent.vLoadingAddClassList = () =>\n    addClassList(resolved, resolved.parent, instance)\n\n  /**\n   * add loading-number to parent.\n   * because if a fullscreen loading is triggered when somewhere\n   * a v-loading.body was triggered before and it's parent is\n   * document.body which with a margin , the fullscreen loading's\n   * destroySelf function will remove 'el-loading-parent--relative',\n   * and then the position of v-loading.body will be error.\n   */\n  let loadingNumber: string | null =\n    resolved.parent.getAttribute('loading-number')\n  if (!loadingNumber) {\n    loadingNumber = '1'\n  } else {\n    loadingNumber = `${Number.parseInt(loadingNumber) + 1}`\n  }\n  resolved.parent.setAttribute('loading-number', loadingNumber)\n\n  resolved.parent.appendChild(instance.$el)\n\n  // after instance render, then modify visible to trigger transition\n  nextTick(() => (instance.visible.value = resolved.visible))\n\n  if (resolved.fullscreen) {\n    fullscreenInstance = instance\n  }\n  return instance\n}\n\nconst resolveOptions = (options: LoadingOptions): LoadingOptionsResolved => {\n  let target: HTMLElement\n  if (isString(options.target)) {\n    target =\n      document.querySelector<HTMLElement>(options.target) ?? document.body\n  } else {\n    target = options.target || document.body\n  }\n  return {\n    parent: target === document.body || options.body ? document.body : target,\n    background: options.background || '',\n    svg: options.svg || '',\n    svgViewBox: options.svgViewBox || '',\n    spinner: options.spinner || false,\n    text: options.text || '',\n    fullscreen: target === document.body && (options.fullscreen ?? true),\n    lock: options.lock ?? false,\n    customClass: options.customClass || '',\n    visible: options.visible ?? true,\n    target,\n  }\n}\n\nconst addStyle = async (\n  options: LoadingOptionsResolved,\n  parent: HTMLElement,\n  instance: LoadingInstance\n) => {\n  const { nextZIndex } = useZIndex()\n\n  const maskStyle: CSSProperties = {}\n  if (options.fullscreen) {\n    instance.originalPosition.value = getStyle(document.body, 'position')\n    instance.originalOverflow.value = getStyle(document.body, 'overflow')\n    maskStyle.zIndex = nextZIndex()\n  } else if (options.parent === document.body) {\n    instance.originalPosition.value = getStyle(document.body, 'position')\n    /**\n     * await dom render when visible is true in init,\n     * because some component's height maybe 0.\n     * e.g. el-table.\n     */\n    await nextTick()\n    for (const property of ['top', 'left']) {\n      const scroll = property === 'top' ? 'scrollTop' : 'scrollLeft'\n      maskStyle[property] = `${\n        (options.target as HTMLElement).getBoundingClientRect()[property] +\n        document.body[scroll] +\n        document.documentElement[scroll] -\n        Number.parseInt(getStyle(document.body, `margin-${property}`), 10)\n      }px`\n    }\n    for (const property of ['height', 'width']) {\n      maskStyle[property] = `${\n        (options.target as HTMLElement).getBoundingClientRect()[property]\n      }px`\n    }\n  } else {\n    instance.originalPosition.value = getStyle(parent, 'position')\n  }\n  for (const [key, value] of Object.entries(maskStyle)) {\n    instance.$el.style[key] = value\n  }\n}\n\nconst addClassList = (\n  options: LoadingOptions,\n  parent: HTMLElement,\n  instance: LoadingInstance\n) => {\n  const ns = useNamespace('loading')\n\n  if (\n    instance.originalPosition.value !== 'absolute' &&\n    instance.originalPosition.value !== 'fixed'\n  ) {\n    addClass(parent, ns.bm('parent', 'relative'))\n  } else {\n    removeClass(parent, ns.bm('parent', 'relative'))\n  }\n  if (options.fullscreen && options.lock) {\n    addClass(parent, ns.bm('parent', 'hidden'))\n  } else {\n    removeClass(parent, ns.bm('parent', 'hidden'))\n  }\n}\n","import type { CSSProperties } from 'vue'\nimport type { ThumbProps } from './thumb'\n\nexport const GAP = 4 // top 2 + bottom 2 of bar instance\n\nexport const BAR_MAP = {\n  vertical: {\n    offset: 'offsetHeight',\n    scroll: 'scrollTop',\n    scrollSize: 'scrollHeight',\n    size: 'height',\n    key: 'vertical',\n    axis: 'Y',\n    client: 'clientY',\n    direction: 'top',\n  },\n  horizontal: {\n    offset: 'offsetWidth',\n    scroll: 'scrollLeft',\n    scrollSize: 'scrollWidth',\n    size: 'width',\n    key: 'horizontal',\n    axis: 'X',\n    client: 'clientX',\n    direction: 'left',\n  },\n} as const\n\nexport const renderThumbStyle = ({\n  move,\n  size,\n  bar,\n}: Pick<ThumbProps, 'move' | 'size'> & {\n  bar: typeof BAR_MAP[keyof typeof BAR_MAP]\n}): CSSProperties => ({\n  [bar.size]: size,\n  transform: `translate${bar.axis}(${move}%)`,\n})\n","import { buildProps } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type Thumb from './thumb.vue'\n\nexport const thumbProps = buildProps({\n  vertical: Boolean,\n  size: String,\n  move: Number,\n  ratio: {\n    type: Number,\n    required: true,\n  },\n  always: Boolean,\n} as const)\nexport type ThumbProps = ExtractPropTypes<typeof thumbProps>\n\nexport type ThumbInstance = InstanceType<typeof Thumb>\n","import type { InjectionKey } from 'vue'\n\nexport interface ScrollbarContext {\n  scrollbarElement: HTMLDivElement\n  wrapElement: HTMLDivElement\n}\n\nexport const scrollbarContextKey: InjectionKey<ScrollbarContext> = Symbol(\n  'scrollbarContextKey'\n)\n","<template>\n  <transition :name=\"ns.b('fade')\">\n    <div\n      v-show=\"always || visible\"\n      ref=\"instance\"\n      :class=\"[ns.e('bar'), ns.is(bar.key)]\"\n      @mousedown=\"clickTrackHandler\"\n    >\n      <div\n        ref=\"thumb\"\n        :class=\"ns.e('thumb')\"\n        :style=\"thumbStyle\"\n        @mousedown=\"clickThumbHandler\"\n      />\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, onBeforeUnmount, ref, toRef } from 'vue'\nimport { isClient, useEventListener } from '@vueuse/core'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { BAR_MAP, renderThumbStyle } from './util'\nimport { thumbProps } from './thumb'\n\nconst COMPONENT_NAME = 'Thumb'\nconst props = defineProps(thumbProps)\n\nconst scrollbar = inject(scrollbarContextKey)\nconst ns = useNamespace('scrollbar')\n\nif (!scrollbar) throwError(COMPONENT_NAME, 'can not inject scrollbar context')\n\nconst instance = ref<HTMLDivElement>()\nconst thumb = ref<HTMLDivElement>()\n\nconst thumbState = ref<Partial<Record<'X' | 'Y', number>>>({})\nconst visible = ref(false)\n\nlet cursorDown = false\nlet cursorLeave = false\nlet originalOnSelectStart:\n  | ((this: GlobalEventHandlers, ev: Event) => any)\n  | null = isClient ? document.onselectstart : null\n\nconst bar = computed(() => BAR_MAP[props.vertical ? 'vertical' : 'horizontal'])\n\nconst thumbStyle = computed(() =>\n  renderThumbStyle({\n    size: props.size,\n    move: props.move,\n    bar: bar.value,\n  })\n)\n\nconst offsetRatio = computed(\n  () =>\n    // offsetRatioX = original width of thumb / current width of thumb / ratioX\n    // offsetRatioY = original height of thumb / current height of thumb / ratioY\n    // instance height = wrap height - GAP\n    instance.value![bar.value.offset] ** 2 /\n    scrollbar.wrapElement![bar.value.scrollSize] /\n    props.ratio /\n    thumb.value![bar.value.offset]\n)\n\nconst clickThumbHandler = (e: MouseEvent) => {\n  // prevent click event of middle and right button\n  e.stopPropagation()\n  if (e.ctrlKey || [1, 2].includes(e.button)) return\n\n  window.getSelection()?.removeAllRanges()\n  startDrag(e)\n\n  const el = e.currentTarget as HTMLDivElement\n  if (!el) return\n  thumbState.value[bar.value.axis] =\n    el[bar.value.offset] -\n    (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction])\n}\n\nconst clickTrackHandler = (e: MouseEvent) => {\n  if (!thumb.value || !instance.value || !scrollbar.wrapElement) return\n\n  const offset = Math.abs(\n    (e.target as HTMLElement).getBoundingClientRect()[bar.value.direction] -\n      e[bar.value.client]\n  )\n  const thumbHalf = thumb.value[bar.value.offset] / 2\n  const thumbPositionPercentage =\n    ((offset - thumbHalf) * 100 * offsetRatio.value) /\n    instance.value[bar.value.offset]\n\n  scrollbar.wrapElement[bar.value.scroll] =\n    (thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize]) /\n    100\n}\n\nconst startDrag = (e: MouseEvent) => {\n  e.stopImmediatePropagation()\n  cursorDown = true\n  document.addEventListener('mousemove', mouseMoveDocumentHandler)\n  document.addEventListener('mouseup', mouseUpDocumentHandler)\n  originalOnSelectStart = document.onselectstart\n  document.onselectstart = () => false\n}\n\nconst mouseMoveDocumentHandler = (e: MouseEvent) => {\n  if (!instance.value || !thumb.value) return\n  if (cursorDown === false) return\n\n  const prevPage = thumbState.value[bar.value.axis]\n  if (!prevPage) return\n\n  const offset =\n    (instance.value.getBoundingClientRect()[bar.value.direction] -\n      e[bar.value.client]) *\n    -1\n  const thumbClickPosition = thumb.value[bar.value.offset] - prevPage\n  const thumbPositionPercentage =\n    ((offset - thumbClickPosition) * 100 * offsetRatio.value) /\n    instance.value[bar.value.offset]\n  scrollbar.wrapElement[bar.value.scroll] =\n    (thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize]) /\n    100\n}\n\nconst mouseUpDocumentHandler = () => {\n  cursorDown = false\n  thumbState.value[bar.value.axis] = 0\n  document.removeEventListener('mousemove', mouseMoveDocumentHandler)\n  document.removeEventListener('mouseup', mouseUpDocumentHandler)\n  restoreOnselectstart()\n  if (cursorLeave) visible.value = false\n}\n\nconst mouseMoveScrollbarHandler = () => {\n  cursorLeave = false\n  visible.value = !!props.size\n}\n\nconst mouseLeaveScrollbarHandler = () => {\n  cursorLeave = true\n  visible.value = cursorDown\n}\n\nonBeforeUnmount(() => {\n  restoreOnselectstart()\n  document.removeEventListener('mouseup', mouseUpDocumentHandler)\n})\n\nconst restoreOnselectstart = () => {\n  if (document.onselectstart !== originalOnSelectStart)\n    document.onselectstart = originalOnSelectStart\n}\n\nuseEventListener(\n  toRef(scrollbar, 'scrollbarElement'),\n  'mousemove',\n  mouseMoveScrollbarHandler\n)\nuseEventListener(\n  toRef(scrollbar, 'scrollbarElement'),\n  'mouseleave',\n  mouseLeaveScrollbarHandler\n)\n</script>\n","import { buildProps } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type Bar from './bar.vue'\n\nexport const barProps = buildProps({\n  always: {\n    type: Boolean,\n    default: true,\n  },\n  width: String,\n  height: String,\n  ratioX: {\n    type: Number,\n    default: 1,\n  },\n  ratioY: {\n    type: Number,\n    default: 1,\n  },\n} as const)\nexport type BarProps = ExtractPropTypes<typeof barProps>\n\nexport type BarInstance = InstanceType<typeof Bar>\n","<template>\n  <thumb :move=\"moveX\" :ratio=\"ratioX\" :size=\"width\" :always=\"always\" />\n  <thumb\n    :move=\"moveY\"\n    :ratio=\"ratioY\"\n    :size=\"height\"\n    vertical\n    :always=\"always\"\n  />\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport { GAP } from './util'\nimport Thumb from './thumb.vue'\nimport { barProps } from './bar'\n\nconst props = defineProps(barProps)\n\nconst moveX = ref(0)\nconst moveY = ref(0)\n\nconst handleScroll = (wrap: HTMLDivElement) => {\n  if (wrap) {\n    const offsetHeight = wrap.offsetHeight - GAP\n    const offsetWidth = wrap.offsetWidth - GAP\n\n    moveY.value = ((wrap.scrollTop * 100) / offsetHeight) * props.ratioY\n    moveX.value = ((wrap.scrollLeft * 100) / offsetWidth) * props.ratioX\n  }\n}\n\ndefineExpose({\n  handleScroll,\n})\n</script>\n","import { buildProps, definePropType, isNumber } from '@element-plus/utils'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\nimport type Scrollbar from './scrollbar.vue'\n\nexport const scrollbarProps = buildProps({\n  height: {\n    type: [String, Number],\n    default: '',\n  },\n  maxHeight: {\n    type: [String, Number],\n    default: '',\n  },\n  native: Boolean,\n  wrapStyle: {\n    type: definePropType<StyleValue>([String, Object, Array]),\n    default: '',\n  },\n  wrapClass: {\n    type: [String, Array],\n    default: '',\n  },\n  viewClass: {\n    type: [String, Array],\n    default: '',\n  },\n  viewStyle: {\n    type: [String, Array, Object],\n    default: '',\n  },\n  noresize: Boolean, // 如果 container 尺寸不会发生变化，最好设置它可以优化性能\n  tag: {\n    type: String,\n    default: 'div',\n  },\n  always: Boolean,\n  minSize: {\n    type: Number,\n    default: 20,\n  },\n} as const)\nexport type ScrollbarProps = ExtractPropTypes<typeof scrollbarProps>\n\nexport const scrollbarEmits = {\n  scroll: ({\n    scrollTop,\n    scrollLeft,\n  }: {\n    scrollTop: number\n    scrollLeft: number\n  }) => [scrollTop, scrollLeft].every(isNumber),\n}\nexport type ScrollbarEmits = typeof scrollbarEmits\n\nexport type ScrollbarInstance = InstanceType<typeof Scrollbar>\n","<template>\n  <div ref=\"scrollbar$\" :class=\"ns.b()\">\n    <div\n      ref=\"wrap$\"\n      :class=\"[\n        wrapClass,\n        ns.e('wrap'),\n        { [ns.em('wrap', 'hidden-default')]: !native },\n      ]\"\n      :style=\"style\"\n      @scroll=\"handleScroll\"\n    >\n      <component\n        :is=\"tag\"\n        ref=\"resize$\"\n        :class=\"[ns.e('view'), viewClass]\"\n        :style=\"viewStyle\"\n      >\n        <slot />\n      </component>\n    </div>\n    <template v-if=\"!native\">\n      <bar\n        ref=\"barRef\"\n        :height=\"sizeHeight\"\n        :width=\"sizeWidth\"\n        :always=\"always\"\n        :ratio-x=\"ratioX\"\n        :ratio-y=\"ratioY\"\n      />\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  nextTick,\n  onMounted,\n  onUpdated,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { useEventListener, useResizeObserver } from '@vueuse/core'\nimport { addUnit, debugWarn, isNumber, isObject } from '@element-plus/utils'\nimport { scrollbarContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { GAP } from './util'\nimport Bar from './bar.vue'\nimport { scrollbarEmits, scrollbarProps } from './scrollbar'\nimport type { BarInstance } from './bar'\nimport type { CSSProperties, StyleValue } from 'vue'\n\ndefineOptions({\n  name: 'ElScrollbar',\n})\n\nconst props = defineProps(scrollbarProps)\nconst emit = defineEmits(scrollbarEmits)\n\nconst ns = useNamespace('scrollbar')\n\nlet stopResizeObserver: (() => void) | undefined = undefined\nlet stopResizeListener: (() => void) | undefined = undefined\n\nconst scrollbar$ = ref<HTMLDivElement>()\nconst wrap$ = ref<HTMLDivElement>()\nconst resize$ = ref<HTMLElement>()\n\nconst sizeWidth = ref('0')\nconst sizeHeight = ref('0')\nconst barRef = ref<BarInstance>()\nconst ratioY = ref(1)\nconst ratioX = ref(1)\nconst SCOPE = 'ElScrollbar'\n\nconst style = computed<StyleValue>(() => {\n  const style: CSSProperties = {}\n  if (props.height) style.height = addUnit(props.height)\n  if (props.maxHeight) style.maxHeight = addUnit(props.maxHeight)\n  return [props.wrapStyle, style]\n})\n\nconst handleScroll = () => {\n  if (wrap$.value) {\n    barRef.value?.handleScroll(wrap$.value)\n\n    emit('scroll', {\n      scrollTop: wrap$.value.scrollTop,\n      scrollLeft: wrap$.value.scrollLeft,\n    })\n  }\n}\n\nfunction scrollTo(xCord: number, yCord?: number): void\nfunction scrollTo(options: ScrollToOptions): void\nfunction scrollTo(arg1: unknown, arg2?: number) {\n  if (isObject(arg1)) {\n    wrap$.value!.scrollTo(arg1)\n  } else if (isNumber(arg1) && isNumber(arg2)) {\n    wrap$.value!.scrollTo(arg1, arg2)\n  }\n}\n\nconst setScrollTop = (value: number) => {\n  if (!isNumber(value)) {\n    debugWarn(SCOPE, 'value must be a number')\n    return\n  }\n  wrap$.value!.scrollTop = value\n}\n\nconst setScrollLeft = (value: number) => {\n  if (!isNumber(value)) {\n    debugWarn(SCOPE, 'value must be a number')\n    return\n  }\n  wrap$.value!.scrollLeft = value\n}\n\nconst update = () => {\n  if (!wrap$.value) return\n  const offsetHeight = wrap$.value.offsetHeight - GAP\n  const offsetWidth = wrap$.value.offsetWidth - GAP\n\n  const originalHeight = offsetHeight ** 2 / wrap$.value.scrollHeight\n  const originalWidth = offsetWidth ** 2 / wrap$.value.scrollWidth\n  const height = Math.max(originalHeight, props.minSize)\n  const width = Math.max(originalWidth, props.minSize)\n\n  ratioY.value =\n    originalHeight /\n    (offsetHeight - originalHeight) /\n    (height / (offsetHeight - height))\n  ratioX.value =\n    originalWidth /\n    (offsetWidth - originalWidth) /\n    (width / (offsetWidth - width))\n\n  sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : ''\n  sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : ''\n}\n\nwatch(\n  () => props.noresize,\n  (noresize) => {\n    if (noresize) {\n      stopResizeObserver?.()\n      stopResizeListener?.()\n    } else {\n      ;({ stop: stopResizeObserver } = useResizeObserver(resize$, update))\n      stopResizeListener = useEventListener('resize', update)\n    }\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => [props.maxHeight, props.height],\n  () => {\n    if (!props.native)\n      nextTick(() => {\n        update()\n        if (wrap$.value) {\n          barRef.value?.handleScroll(wrap$.value)\n        }\n      })\n  }\n)\n\nprovide(\n  scrollbarContextKey,\n  reactive({\n    scrollbarElement: scrollbar$,\n    wrapElement: wrap$,\n  })\n)\n\nonMounted(() => {\n  if (!props.native) nextTick(() => update())\n})\nonUpdated(() => update())\n\ndefineExpose({\n  /** @description scrollbar wrap ref */\n  wrap$,\n  /** @description update scrollbar state manually */\n  update,\n  /** @description scrolls to a particular set of coordinates */\n  scrollTo,\n  /** @description set distance to scroll top */\n  setScrollTop,\n  /** @description set distance to scroll left */\n  setScrollLeft,\n  /** @description handle scroll event */\n  handleScroll,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\n\nimport Scrollbar from './src/scrollbar.vue'\n\nexport const ElScrollbar = withInstall(Scrollbar)\nexport default ElScrollbar\n\nexport * from './src/util'\nexport * from './src/scrollbar'\nexport * from './src/thumb'\n"],"names":["INSTANCE_KEY","Symbol","createInstance","el","binding","_a","_b","_c","_d","vm","instance","getBindingProp","key","isObject","value","resolveExpression","data","isString","ref","getProp","name","getAttribute","hyphenate","fullscreen","modifiers","options","text","svg","svgViewBox","spinner","background","customClass","target","body","lock","Loading","updateOptions","newOptions","originalOptions","Object","keys","isRef","vLoading","mounted","updated","oldValue","close","unmounted","createLoadingComponent","afterLeaveTimer","ns","useNamespace","afterLeaveFlag","reactive","originalPosition","originalOverflow","visible","setText","destroySelf","parent","vLoadingAddClassList","loadingNumber","Number","parseInt","setAttribute","toString","removeClass","bm","removeAttribute","removeElLoadingChild","loadingInstance","unmount","$el","parentNode","removeChild","beforeClose","clearTimeout","window","setTimeout","closed","call","handleAfterLeave","elLoadingComponent","setup","h","class","viewBox","innerHTML","cx","cy","r","fill","spinnerText","b","Transition","onAfterLeave","default","withCtx","withDirectives","createVNode","style","backgroundColor","vShow","createApp","mount","document","createElement","toRefs","fullscreenInstance","isClient","resolved","resolveOptions","addStyle","addClassList","appendChild","nextTick","querySelector","nextZIndex","useZIndex","maskStyle","getStyle","zIndex","property","scroll","getBoundingClientRect","documentElement","entries","addClass","GAP","BAR_MAP","vertical","offset","scrollSize","size","axis","client","direction","horizontal","renderThumbStyle","move","bar","transform","thumbProps","buildProps","Boolean","String","ratio","type","required","always","scrollbarContextKey","COMPONENT_NAME","scrollbar","inject","throwError","thumb","thumbState","cursorDown","cursorLeave","originalOnSelectStart","onselectstart","computed","props","thumbStyle","offsetRatio","wrapElement","clickThumbHandler","e","startDrag","clickTrackHandler","thumbHalf","mouseMoveDocumentHandler","mouseUpDocumentHandler","prevPage","thumbClickPosition","restoreOnselectstart","onBeforeUnmount","useEventListener","toRef","mouseMoveScrollbarHandler","barProps","width","height","ratioX","ratioY","moveX","moveY","handleScroll","wrap","offsetHeight","offsetWidth","scrollTop","scrollLeft","expose","scrollbarProps","maxHeight","native","wrapStyle","definePropType","Array","wrapClass","viewClass","viewStyle","noresize","tag","minSize","scrollbarEmits","every","isNumber","stopResizeObserver","stopResizeListener","scrollbar$","wrap$","resize$","sizeWidth","sizeHeight","barRef","SCOPE","emit","scrollTo","arg1","debugWarn","originalHeight","watch","stop","immediate","update","provide","scrollbarElement","onMounted","onUpdated","setScrollTop","setScrollLeft","ElScrollbar","withInstall","Scrollbar"],"sourceRoot":""}