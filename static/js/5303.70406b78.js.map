{"version":3,"file":"static/js/5303.70406b78.js","mappings":"kRACY,MAACA,GAAcC,EAAAA,EAAAA,IAAW,CACpCC,KAAM,CACJC,MAAMC,EAAAA,EAAAA,IAAeC,OACrBC,QAAS,KAAMC,EAAAA,EAAAA,GAAQ,O,wBCJf,MAACC,EAAqBC,OAAO,sB,2GCiBnCC,EAAiB,WAMjBC,GAAW,UACXC,GAAW,QAAOJ,GACnBI,IAAU,OAAWF,EAAgB,qCAE1C,MAAMG,GAAK,OAAa,QAElBC,GAAS,UACTC,GAAW,UAEXC,EAAc,KACpB,QACA,IAEA,uDACA,QACA,SACA,sBA6BA,OA3BAC,EAAAA,KAAAA,OAAAA,IACA,YACA,uFAEA,SACA,aACA,SAGAC,EAAAA,EAAAA,UAAAA,EAAAA,EAAAA,IAAAA,MAEA,6BAEAC,EAAAA,EAAAA,wBAAAA,IAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,oBAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,EAAAA,GAEA,mCASA,MARA,cAEA,kBAEAD,GAAAA,OAAAA,WAAAA,EAAAA,aAAAA,OAAAA,WAAAA,EAAAA,eAEAC,GAAAA,OAAAA,WAAAA,EAAAA,eAEA,KAGA,CACA,aACAC,UAAAA,aAAAA,EAAAA,EAAAA,IAAAA,MAAAA,SAMA,QACA,MAAAJ,I,OACAK,EAAAA,EAAAA,KAAAA,IAAAA,EAAAA,OAAAA,gBACA,UAEAC,MAEA,CAAAC,WAAAA,KAEAC,EAAAA,EAAAA,KAAAA,GAAAA,IAAAA,MAAAC,EAEA,CAEAC,IAAAA,EACAJ,W,2TCnDaK,MAAAA,GAAc1B,EAAAA,EAAAA,IAAW,CACpC2B,MAAO,CACLzB,MAAMC,EAAAA,EAAAA,IAAkCC,OACxCC,QAAS,KAAMC,EAAAA,EAAAA,GAAQ,KAEzBsB,YAAa,CACX1B,KAAM,CAAC2B,OAAQC,QACfzB,QAAS,IAEX0B,SAAUC,QACVC,WAAY,CACV/B,MAAMC,EAAAA,EAAAA,IAEJ+B,UACF7B,QAAS8B,EAAAA,IAEXC,YAAa,CACXlC,MAAMC,EAAAA,EAAAA,IAA0D+B,UAChE7B,QAAS8B,EAAAA,IAEXjC,KAAM,CACJA,KAAM2B,OACNQ,OAAQ,CAAC,OAAQ,cAAe,IAChChC,QAAS,IAEXiC,QAASN,UAKLvB,EAAiB,WACjB8B,GAASC,EAAAA,EAAAA,IAAgB,CAC7BC,KAAMhC,EACNO,MAAOU,E,gBAEFF,IAAoB,mBACjBkB,GAAKC,EAAAA,EAAAA,IAAAA,GAEX,IACIC,EAAAA,EAAAA,GAAJnC,EAAyB,kCAEzB,MAAMG,GAAKiC,EAAAA,EAAAA,GAAa,QAClBC,GAAaC,EAAAA,EAAAA,OACbC,GAAUC,EAAAA,EAAAA,OAEVC,GAAazB,EAAAA,EAAAA,MACb0B,GAAO1B,EAAAA,EAAAA,MACP2B,GAAM3B,EAAAA,EAAAA,MAEN4B,GAAa5B,EAAAA,EAAAA,KAAwB,GACrC6B,GAAY7B,EAAAA,EAAAA,IAAI,GAChB8B,GAAU9B,EAAAA,EAAAA,KAAI,GACd+B,GAAY/B,EAAAA,EAAAA,KAAI,GAEhBgC,GAAWC,EAAAA,EAAAA,KAAS,IACxB,CAAC,MAAO,UAAUC,SAAShD,EAASK,MAAM4C,aACtC,QACA,WAEAC,GAAWH,EAAAA,EAAAA,KAAwB,KACvC,MAAMI,EAAyB,UAAnBL,EAASM,MAAoB,IAAM,IAC/C,MAAO,CACL5C,UAAuB2C,YAAAA,MAAQR,EAAUS,e,OAIvCC,IAAAA,EAAAA,MACJ,OAEA,MAAMC,EACJf,EAAWa,MAAO,UAAQG,EAAAA,EAAAA,IAAWT,EAASM,UAC1CI,EAAgBb,EAAUS,MAEhC,IAAKI,EAECC,OAGNd,MAASc,EAASA,EAAlB,EAAAD,EAAAA,EAAA,EAZFb,EAAAA,MAAAA,GAeMe,EAAa,KACjB,IAAKnB,EAAWa,QAAUZ,EAAKY,MAE/B,OACA,MAAME,EAAa,QACP,kBAAQ,EAAkB,UAChCE,EAAgBb,EAAtBS,MAAA,8BAEWI,EAAP,EAA2BF,MAE/B,QACYE,EAIH,OAfX,MAAM,EAAN,gB,WAmBQ,EAAN,UACA,MAAeG,EAAAA,EAAXP,MAEJ,oCAEMQ,aACN,UAEA,MAAMC,EAAYtB,EAAWa,MAADU,cAA5B,cACA,MAGA,OACA,MAAMC,EAAoB,EAAU,MAC9BC,EAAYC,CAAAA,MAAAA,UACVC,SAAJlE,EAAkB+D,MAAAA,aAEhBP,EAAyB,EAA/B,wBACIC,EAAJ,0B,kDAEA,EAAkB,QAChB,QACEA,GAED,gB,qBAEUU,EAAAA,MACSA,EAAkBC,QACrCX,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,SAGUU,EACM,IAAAJ,EAAsBM,MACtCZ,EAAAA,GAAAA,EAAAA,IAAAA,EAAAA,MACGU,EAAkBG,OAASP,EAAkBO,SAC/Cb,EACED,GACCW,EAAkBG,OAASP,EAAkBO,U,gBAGpDb,EAAS,MAAQc,KAAL,IAAAd,EAAZO,IAzCFtD,EAAAA,K,sBA6CMA,OACJ,QAAU0C,EAAUb,MAAAA,UAApBgB,EAAAA,EAAAA,IAAsC,YAEhCiB,EAAc,EAAQ,MAAkB,UAASjB,EAAAA,EAAAA,IAART,EAA/C,UACMQ,EACJf,EAAWa,MACb,KAAmB,EAAY,C,gBAE3BE,EAAAA,MAAgBkB,EAAS,UAC3B9B,EAAmB,MAAA+B,KAAYC,EAC/BhC,EAAWU,MAAXV,KAAAA,EAAAA,EAAAA,EACAA,EAAWU,EAAXV,IACUC,EAACS,MAAMuB,EAAoB,QAEnChC,EAASS,OAASoB,EACnB,MACI7B,EAAAA,MAAAA,IAGHA,EAAAiC,IACD,gBACF,GArBHC,EAqBG,K,EAAA,KAGGC,EAHH,MAIDV,GAEMW,EAAAA,E,IAAA,sBAAMC,O,MAANC,EAAAA,MAAAA,KAAAA,EAAAA,cAAAA,iBAAAA,eAAkBb,EAAAA,EAAAA,QAAAA,EAAAA,QAAlB,IAA4BW,EAIlCG,EAHIC,IAAMH,GAALG,IAAAA,E,MAGW1F,EAAAA,OACX2F,EAML,IAEE,aACIC,EAAoB,EAEVJ,EAGbA,EAAAA,GAAAA,QACFA,EAAM,GAAAK,QACLC,KAEE,OACAL,EAAS,QACVtC,EAAM,WAEN,iB,OACFnC,EAAAA,EAAAA,IAAAA,GAAAA,I,aACDwE,EAAO,OAAYO,E,eACnBP,YAAO,IAAYK,EAAQ,kBAE5B7E,EAAAA,EAAAA,IAnCD,O,EAqCM8E,YAAQ,IAAS1C,EAAAA,OAAAA,GAAA,IAAvBA,EAAAA,OAAAA,M,eAKApC,EAAAA,EAAAA,KAAM0B,IAADsD,YAActD,IAAeuD,KAAA,M,SAC5BvD,IAAUzB,M,EACH,CACVgF,oB,iBAGFjF,EAAAA,EAAAA,KAND,+BAOAA,MAAM4B,SAEQ,KACX,MAAMsD,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,IAAAA,OAAAA,CACL9C,MAAS,CAACO,EAAV,cAAAnD,EAAAA,GAAAA,YAAAA,EAAAA,MAAAA,OACD,WALH,qBAQAW,QAAAA,IAAkB6B,EAAAA,EAAAA,EAAAA,IAAlB,uBAESmD,EAAAA,EAAAA,IAAOH,OAAW,CAC3BI,MAAU,GAAYjB,EAAA,YAAtB3E,EAAAA,GAAAA,YAAAA,EAAAA,MAAAA,OAEAY,QAAO6C,GAAA,qBAELoC,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,YAFF,KAMQzF,EAAAA,EAAMW,MACZ+E,KAAMhE,CAAEiE,EAAFjE,KACJkE,IAAOC,EAAAC,EAHX,sCAMaC,EAAAA,EAAAA,YAAAA,EAAAA,SACXJ,EAAeK,MAAA,GAAG3D,IACd,MAEW4D,EACL,GACArG,EAAAA,EAAAA,IAAM,KAAayC,CAEZW,MAAAA,gBANb,gCAAA3D,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,SAaW,KAIEgE,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,OAAAA,YAAAA,EAAAA,EAAAA,KAAAA,KAAAA,EAAAA,MAAAA,MAjBb,0CADJ,WA2BA,MAAarD,CAAKJ,EAAAA,EAACe,QAANX,EAAiB2F,GAADhG,EAAiB,MAAAiD,aAAAhD,EAAAA,GAAAA,SAAAA,EAAAA,QAAAA,EAAAA,GAAAA,WAAAA,EAAAA,MAAAA,UAAAA,EAAAA,GAAAA,WAAAA,GAAAA,EAAAA,GAAAA,QAAAA,EAAAA,QAC5C,GAAa,WACPmG,IAAAA,OAAiBG,IACvBP,gBAAAA,QAAAA,IAEMM,KAAAA,MAAmB,kCAMXE,EANW,uCAAzBA,IAYAV,IACMW,EAAAA,WAAeT,EAAAO,EAAeC,IAEpC,UAEgBD,KAFhB,GAIWC,EADArB,OAESJ,EAAAA,EAAAA,WAAdyB,EAAAA,OACAzB,EAAAA,EAAAA,WAKG1E,EAAAA,YAXT2F,EAAAQ,KAAA,iBAAO,e,IAiBM/D,E,MACD,mBAlBZ,2BAAAxC,EAAAA,GAAAA,EAAAA,MAAAA,eAAA,IAmBcuG,EAAAA,EAAAA,IAAmB,O,MAChBvG,EAAAA,EAAAA,cACXI,IAAAA,GAF2B,EAG5BuF,EAAAA,EAAAA,IAtBL,kBAuBgBY,OAAsBvG,EAAAA,GAAAA,EAAAA,MAAAA,aAAAA,EAAAA,GAAAA,UAAAA,EAAAA,SAAAA,CAAAA,MAAAA,UAAAA,SAAAA,EAAAA,MAAAA,eAChC,MAKEI,MAAAA,EAAMoB,MACP,eACF,aA/BL,CAiCQpB,EAACqG,KAKX,MALWA,EAAAA,EAAAA,IAADC,EAjCR,CApBF,mBA0DA,MAAArH,Y,yBCzVOsH,MAAAA,GAAYvH,EAAAA,EAAAA,IAAW,CAClCE,KAAM,CACJA,KAAM2B,OACNQ,OAAQ,CAAC,OAAQ,cAAe,IAChChC,QAAS,IAEXmH,WAAY,CACVtH,KAAM,CAAC2B,OAAQC,QACfzB,QAAS,IAEX0G,SAAU/E,QACVyF,QAASzF,QACT0F,WAAY,CACVxH,KAAM,CAAC2B,OAAQC,QACfzB,QAAS,IAEX0B,SAAUC,QACV4B,YAAa,CACX1D,KAAM2B,OACNQ,OAAQ,CAAC,MAAO,QAAS,SAAU,QACnChC,QAAS,OAEXsH,YAAa,CACXzH,MAAMC,EAAAA,EAAAA,IAKJ+B,UACF7B,QAAS,KAAM,GAEjBiC,QAASN,U,8BAIM,EAAG,C,eAGb,YAAM4F,CAAAA,EAAST,IAAGA,aAAAA,MACvB,gBAAuB1E,EAAmCA,GAC1DoF,KAAAA,CAAAA,EAAaC,IAAsCX,CAAE,gBAF9BxD,SAAAmE,GAGvB,aAAcrF,GAAmCsF,EAAAA,GACjDF,UAAM,KAAqCC,GAG3C,OAAiBtF,EAAAA,EAAAA,IAAAA,CAPZC,KAAAA,SAWPzB,MAAAA,EACEyB,MAD6BmF,EAG7B5G,MAAK,GAHwB,KAI7BgH,EAJ6B,M,EAAA,OAMxBxG,IAAgByG,MAARrH,GAAAA,EAAAA,EAAAA,GAAAA,QAAeY,GAAAA,EAAAA,EAAAA,MAAU,eAC9BZ,GAAiB,QAACI,EAAD0G,YAAvB1G,EAAAA,YAAA,KAEMmC,EAAN,IACAvB,EAAcsG,MAAQnE,EACtBoE,EAAiBC,EAAAA,GAAYrE,G,mBAGhBsE,EAAX,UACAF,IAAItB,EAACuB,EAAAA,EACLD,GAAIvG,EAAC,QAALmC,E,IAGF,MAAoBuE,QAAkC,OAAxBvE,EAAP/C,EAA+B,oBAAA6F,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,SACpD,QACIjF,EAAAA,G,6DAGF,MAAc2D,MAEZgD,EAAiB,CAACxE,EAAD,EAEjByE,KACA,mB,OAEI,YAAJrF,EAAAA,K,EAEM,QAdZ,mBAiBMsF,EAAAA,kBAKJN,EAAO,OAAHO,EAAAA,MAAoBjG,KAAA,UACxB4F,EAAe,aAAD,EAAd,MAAA5F,QANFkG,EAAAA,K,uBAUAR,EAAMS,aAEJzB,EAAAA,EAAAA,KAAA,mBAAAO,GAAAA,EAAAA,M,SACK,IAAD,EAAc,aAAYA,GAA9BW,EAAAA,M,QACK,GAAD,UAJN,M,4CAQEF,CACAA,MAAAA,EAAAA,GAAAA,EAAAA,EAAAA,KAAAA,EAFI,EAAN,gB,WAKA/G,QAKAA,cAKKyH,eACHC,mB,SAGK/E,CAJPnC,gBAQQiH,K,+CACAC,MAAAA,EAAAA,EAAAA,W,aAEC,UACL9H,UAD0BmG,IAAA,0BAA5B,gBAMD,yBAED3F,CACEI,QAAAA,IAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,WADF,KAIamH,GAAAA,EAAAA,EAAAA,IAAAA,MAAAA,CACLC,MAAAA,CAAAA,EAASzD,EAAA,UAAA3E,EAAAA,GACKI,EAAM,eAAxB,IAEWuF,EAAAA,EAAAA,IAFX,sCAAAvF,EAKsC,S,KAC1BA,EAAF,KACL,uBAPL,QAAAA,EAAA,mBASmByH,EATnB,0BADF,e,sBAgBA,UAAY,8BACG,MAAgB7H,CADnB,+DAKOgB,CAAAA,EAAAA,EAAAA,gBALP,gBAKOA,EALP,QAOAZ,IAPA,WAOAA,EAAAA,YAPA,kB,WCjLN,MAACiI,GAAejJ,EAAAA,EAAAA,IAAW,CACrCkJ,MAAO,CACLhJ,KAAM2B,OACNxB,QAAS,IAEXoC,KAAM,CACJvC,KAAM,CAAC2B,OAAQC,QACfzB,QAAS,IAEX0G,SAAU/E,QACVmH,SAAUnH,QACVoH,KAAMpH,U,0GCmBFvB,EAAiB,YAMjBC,GAAW,UACXuH,GAAQ,UAERoB,GAAW,QAAO9I,GACnB8I,IACLzG,EAAAA,EAAAA,GAAAA,EAAAA,8CAEA,MAAMhC,GAAK,OAAa,YAElBoG,GAAQ,UACRsC,GAAa,SAAS,IAAMtI,EAAM+F,UAAYsC,EAASrI,MAAM+F,WAC7DwC,GAAS,SACf,8CAEMC,GAAS,QAAID,EAAOxF,OACpB0F,GAAW,SAAS,IAAMzI,EAAMyB,MAAQuE,EAAMjD,QAC9C2F,GAAiB,SACvB,iCAGAtI,EAAAA,EAAAA,IAAMmI,GAAQ,IACd,mBAGA,MAAM5C,GAAO,QAAS,CACtBgD,IAAAA,EAAAA,IACA1B,QACAjH,QACAyI,WACAF,SACAvC,QACAsC,e,OAGAM,EAAAA,EAAAA,KAAU,KACVP,EAAAA,aAAAA,OAGAQ,EAAAA,EAAAA,KAAY,KACZR,EAAAA,eAAAA,EAAAA,Q,6ZCzEY,MAACS,GAASC,EAAAA,EAAAA,IAAYC,EAAM,CACtCC,QAAAA,IAEWC,GAAYC,EAAAA,EAAAA,IAAgBF,I","sources":["webpack://cocogoat-web/../../../../../packages/components/tabs/src/tab-bar.ts","webpack://cocogoat-web/../../../../packages/tokens/tabs.ts","webpack://cocogoat-web/../../../../../packages/components/tabs/src/tab-bar.vue","webpack://cocogoat-web/../../../../../packages/components/tabs/src/tab-nav.tsx","webpack://cocogoat-web/../../../../../packages/components/tabs/src/tabs.tsx","webpack://cocogoat-web/../../../../../packages/components/tabs/src/tab-pane.ts","webpack://cocogoat-web/../../../../../packages/components/tabs/src/tab-pane.vue","webpack://cocogoat-web/../../../../../packages/components/tabs/index.ts"],"sourcesContent":["import { buildProps, definePropType, mutable } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from '@element-plus/tokens'\nimport type TabBar from './tab-bar.vue'\n\nexport const tabBarProps = buildProps({\n  tabs: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n} as const)\n\nexport type TabBarProps = ExtractPropTypes<typeof tabBarProps>\nexport type TabBarInstance = InstanceType<typeof TabBar>\n","import type { TabPaneProps, TabsProps } from '@element-plus/components/tabs'\nimport type { ComputedRef, InjectionKey, Ref, Slots, UnwrapRef } from 'vue'\n\nexport type TabsPaneContext = UnwrapRef<{\n  uid: number\n  slots: Slots\n  props: TabPaneProps\n  paneName: ComputedRef<string | number | undefined>\n  active: ComputedRef<boolean>\n  index: Ref<string | undefined>\n  isClosable: ComputedRef<boolean>\n}>\n\nexport interface TabsRootContext {\n  props: TabsProps\n  currentName: Ref<string | number>\n  registerPane: (pane: TabsPaneContext) => void\n  unregisterPane: (uid: number) => void\n}\n\nexport const tabsRootContextKey: InjectionKey<TabsRootContext> =\n  Symbol('tabsRootContextKey')\n","<template>\n  <div\n    ref=\"barRef\"\n    :class=\"[ns.e('active-bar'), ns.is(rootTabs.props.tabPosition)]\"\n    :style=\"barStyle\"\n  />\n</template>\n<script lang=\"ts\" setup>\nimport { getCurrentInstance, inject, nextTick, ref, watch } from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { capitalize, throwError } from '@element-plus/utils'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { tabBarProps } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\ndefineOptions({\n  name: 'ElTabBar',\n})\nconst props = defineProps(tabBarProps)\n\nconst instance = getCurrentInstance()!\nconst rootTabs = inject(tabsRootContextKey)\nif (!rootTabs) throwError(COMPONENT_NAME, '<el-tabs><el-tab-bar /></el-tabs>')\n\nconst ns = useNamespace('tabs')\n\nconst barRef = ref<HTMLDivElement>()\nconst barStyle = ref<CSSProperties>()\n\nconst getBarStyle = (): CSSProperties => {\n  let offset = 0\n  let tabSize = 0\n\n  const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n    ? 'width'\n    : 'height'\n  const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n  props.tabs.every((tab) => {\n    const $el = instance.parent?.refs?.[`tab-${tab.paneName}`] as HTMLElement\n    if (!$el) return false\n\n    if (!tab.active) {\n      return true\n    }\n\n    tabSize = $el[`client${capitalize(sizeName)}`]\n    const position = sizeDir === 'x' ? 'left' : 'top'\n    offset =\n      $el.getBoundingClientRect()[position] -\n      ($el.parentElement?.getBoundingClientRect()[position] ?? 0)\n    const tabStyles = window.getComputedStyle($el)\n\n    if (sizeName === 'width') {\n      if (props.tabs.length > 1) {\n        tabSize -=\n          Number.parseFloat(tabStyles.paddingLeft) +\n          Number.parseFloat(tabStyles.paddingRight)\n      }\n      offset += Number.parseFloat(tabStyles.paddingLeft)\n    }\n    return false\n  })\n\n  return {\n    [sizeName]: `${tabSize}px`,\n    transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n  }\n}\n\nconst update = () => (barStyle.value = getBarStyle())\n\nwatch(\n  () => props.tabs,\n  async () => {\n    await nextTick()\n    update()\n  },\n  { immediate: true }\n)\nuseResizeObserver(barRef, () => update())\n\ndefineExpose({\n  /** @description tab root html element */\n  ref: barRef,\n  /** @description method to manually update tab bar style */\n  update,\n})\n</script>\n","import {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport {\n  useDocumentVisibility,\n  useResizeObserver,\n  useWindowFocus,\n} from '@vueuse/core'\nimport {\n  buildProps,\n  capitalize,\n  definePropType,\n  mutable,\n  throwError,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabBar from './tab-bar.vue'\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from '@element-plus/tokens'\nimport type { TabPanelName } from './tabs'\n\ninterface Scrollable {\n  next?: boolean\n  prev?: number\n}\n\nexport const tabNavProps = buildProps({\n  panes: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n  currentName: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  onTabClick: {\n    type: definePropType<\n      (tab: TabsPaneContext, tabName: TabPanelName, ev: Event) => void\n    >(Function),\n    default: NOOP,\n  },\n  onTabRemove: {\n    type: definePropType<(tab: TabsPaneContext, ev: Event) => void>(Function),\n    default: NOOP,\n  },\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  stretch: Boolean,\n} as const)\n\nexport type TabNavProps = ExtractPropTypes<typeof tabNavProps>\n\nconst COMPONENT_NAME = 'ElTabNav'\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n\n  setup(props, { expose }) {\n    const vm = getCurrentInstance()!\n\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`)\n\n    const ns = useNamespace('tabs')\n    const visibility = useDocumentVisibility()\n    const focused = useWindowFocus()\n\n    const navScroll$ = ref<HTMLDivElement>()\n    const nav$ = ref<HTMLDivElement>()\n    const el$ = ref<HTMLDivElement>()\n\n    const scrollable = ref<false | Scrollable>(false)\n    const navOffset = ref(0)\n    const isFocus = ref(false)\n    const focusable = ref(true)\n\n    const sizeName = computed(() =>\n      ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n    )\n    const navStyle = computed<CSSProperties>(() => {\n      const dir = sizeName.value === 'width' ? 'X' : 'Y'\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`,\n      }\n    })\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return\n\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (!currentOffset) return\n\n      const newOffset =\n        currentOffset > containerSize ? currentOffset - containerSize : 0\n\n      navOffset.value = newOffset\n    }\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (navSize - currentOffset <= containerSize) return\n\n      const newOffset =\n        navSize - currentOffset > containerSize * 2\n          ? currentOffset + containerSize\n          : navSize - containerSize\n\n      navOffset.value = newOffset\n    }\n\n    const scrollToActiveTab = async () => {\n      const nav = nav$.value\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return\n\n      await nextTick()\n\n      const activeTab = el$.value.querySelector('.is-active')\n      if (!activeTab) return\n\n      const navScroll = navScroll$.value\n      const isHorizontal = ['top', 'bottom'].includes(\n        rootTabs.props.tabPosition\n      )\n      const activeTabBounding = activeTab.getBoundingClientRect()\n      const navScrollBounding = navScroll.getBoundingClientRect()\n      const maxOffset = isHorizontal\n        ? nav.offsetWidth - navScrollBounding.width\n        : nav.offsetHeight - navScrollBounding.height\n      const currentOffset = navOffset.value\n      let newOffset = currentOffset\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset =\n            currentOffset - (navScrollBounding.left - activeTabBounding.left)\n        }\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset =\n            currentOffset + activeTabBounding.right - navScrollBounding.right\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset =\n            currentOffset - (navScrollBounding.top - activeTabBounding.top)\n        }\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset =\n            currentOffset +\n            (activeTabBounding.bottom - navScrollBounding.bottom)\n        }\n      }\n      newOffset = Math.max(newOffset, 0)\n      navOffset.value = Math.min(newOffset, maxOffset)\n    }\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (containerSize < navSize) {\n        const currentOffset = navOffset.value\n        scrollable.value = scrollable.value || {}\n        scrollable.value.prev = currentOffset\n        scrollable.value.next = currentOffset + containerSize < navSize\n        if (navSize - currentOffset < containerSize) {\n          navOffset.value = navSize - containerSize\n        }\n      } else {\n        scrollable.value = false\n        if (currentOffset > 0) {\n          navOffset.value = 0\n        }\n      }\n    }\n\n    const changeTab = (e: KeyboardEvent) => {\n      const code = e.code\n\n      const { up, down, left, right } = EVENT_CODE\n      if (![up, down, left, right].includes(code)) return\n\n      // 左右上下键更换tab\n      const tabList = Array.from(\n        (e.currentTarget as HTMLDivElement).querySelectorAll<HTMLDivElement>(\n          '[role=tab]'\n        )\n      )\n      const currentIndex = tabList.indexOf(e.target as HTMLDivElement)\n\n      let nextIndex: number\n      if (code === left || code === up) {\n        // left\n        if (currentIndex === 0) {\n          // first\n          nextIndex = tabList.length - 1\n        } else {\n          nextIndex = currentIndex - 1\n        }\n      } else {\n        // right\n        if (currentIndex < tabList.length - 1) {\n          // not last\n          nextIndex = currentIndex + 1\n        } else {\n          nextIndex = 0\n        }\n      }\n      tabList[nextIndex].focus() // 改变焦点元素\n      tabList[nextIndex].click() // 选中下一个tab\n      setFocus()\n    }\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true\n    }\n    const removeFocus = () => (isFocus.value = false)\n\n    watch(visibility, (visibility) => {\n      if (visibility === 'hidden') {\n        focusable.value = false\n      } else if (visibility === 'visible') {\n        setTimeout(() => (focusable.value = true), 50)\n      }\n    })\n    watch(focused, (focused) => {\n      if (focused) {\n        setTimeout(() => (focusable.value = true), 50)\n      } else {\n        focusable.value = false\n      }\n    })\n\n    useResizeObserver(el$, update)\n\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0))\n    onUpdated(() => update())\n\n    expose({\n      scrollToActiveTab,\n      removeFocus,\n    })\n\n    watch(\n      () => props.panes,\n      () => vm.update(),\n      { flush: 'post' }\n    )\n\n    return () => {\n      const scrollBtn = scrollable.value\n        ? [\n            <span\n              class={[\n                ns.e('nav-prev'),\n                ns.is('disabled', !scrollable.value.prev),\n              ]}\n              onClick={scrollPrev}\n            >\n              <ElIcon>\n                <ArrowLeft />\n              </ElIcon>\n            </span>,\n            <span\n              class={[\n                ns.e('nav-next'),\n                ns.is('disabled', !scrollable.value.next),\n              ]}\n              onClick={scrollNext}\n            >\n              <ElIcon>\n                <ArrowRight />\n              </ElIcon>\n            </span>,\n          ]\n        : null\n\n      const tabs = props.panes.map((pane, index) => {\n        const tabName = pane.props.name || pane.index || `${index}`\n        const closable: boolean = pane.isClosable || props.editable\n        pane.index = `${index}`\n\n        const btnClose = closable ? (\n          <ElIcon\n            class=\"is-icon-close\"\n            // `onClick` not exist when generate dts\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            onClick={(ev: MouseEvent) => props.onTabRemove(pane, ev)}\n          >\n            <Close />\n          </ElIcon>\n        ) : null\n\n        const tabLabelContent = pane.slots.label?.() || pane.props.label\n        const tabindex = pane.active ? 0 : -1\n\n        return (\n          <div\n            ref={`tab-${tabName}`}\n            class={[\n              ns.e('item'),\n              ns.is(rootTabs.props.tabPosition),\n              ns.is('active', pane.active),\n              ns.is('disabled', pane.props.disabled),\n              ns.is('closable', closable),\n              ns.is('focus', isFocus.value),\n            ]}\n            id={`tab-${tabName}`}\n            key={`tab-${tabName}`}\n            aria-controls={`pane-${tabName}`}\n            role=\"tab\"\n            aria-selected={pane.active}\n            tabindex={tabindex}\n            onFocus={() => setFocus()}\n            onBlur={() => removeFocus()}\n            onClick={(ev: MouseEvent) => {\n              removeFocus()\n              props.onTabClick(pane, tabName, ev)\n            }}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (\n                closable &&\n                (ev.code === EVENT_CODE.delete ||\n                  ev.code === EVENT_CODE.backspace)\n              ) {\n                props.onTabRemove(pane, ev)\n              }\n            }}\n          >\n            {...[tabLabelContent, btnClose]}\n          </div>\n        )\n      })\n\n      return (\n        <div\n          ref={el$}\n          class={[\n            ns.e('nav-wrap'),\n            ns.is('scrollable', !!scrollable.value),\n            ns.is(rootTabs.props.tabPosition),\n          ]}\n        >\n          {scrollBtn}\n          <div class={ns.e('nav-scroll')} ref={navScroll$}>\n            <div\n              class={[\n                ns.e('nav'),\n                ns.is(rootTabs.props.tabPosition),\n                ns.is(\n                  'stretch',\n                  props.stretch &&\n                    ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n                ),\n              ]}\n              ref={nav$}\n              style={navStyle.value}\n              role=\"tablist\"\n              onKeydown={changeTab}\n            >\n              {...[\n                !props.type ? <TabBar tabs={[...props.panes]} /> : null,\n                tabs,\n              ]}\n            </div>\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport type TabNavInstance = InstanceType<typeof TabNav>\nexport default TabNav\n","import { defineComponent, provide, reactive, ref, renderSlot, watch } from 'vue'\nimport {\n  buildProps,\n  definePropType,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { EVENT_CODE, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport ElIcon from '@element-plus/components/icon'\nimport { Plus } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabNav from './tab-nav'\nimport type { TabNavInstance } from './tab-nav'\nimport type { TabsPaneContext } from '@element-plus/tokens'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type TabPanelName = string | number\n\nexport const tabsProps = buildProps({\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  activeName: {\n    type: [String, Number],\n    default: '',\n  },\n  closable: Boolean,\n  addable: Boolean,\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  tabPosition: {\n    type: String,\n    values: ['top', 'right', 'bottom', 'left'],\n    default: 'top',\n  },\n  beforeLeave: {\n    type: definePropType<\n      (\n        newName: TabPanelName,\n        oldName: TabPanelName\n      ) => Awaitable<void | boolean>\n    >(Function),\n    default: () => true,\n  },\n  stretch: Boolean,\n} as const)\nexport type TabsProps = ExtractPropTypes<typeof tabsProps>\n\nconst isPanelName = (value: unknown): value is string | number =>\n  isString(value) || isNumber(value)\n\nexport const tabsEmits = {\n  [UPDATE_MODEL_EVENT]: (name: TabPanelName) => isPanelName(name),\n  'tab-click': (pane: TabsPaneContext, ev: Event) => ev instanceof Event,\n  'tab-change': (name: TabPanelName) => isPanelName(name),\n  edit: (paneName: TabPanelName | undefined, action: 'remove' | 'add') =>\n    ['remove', 'add'].includes(action),\n  'tab-remove': (name: TabPanelName) => isPanelName(name),\n  'tab-add': () => true,\n}\nexport type TabsEmits = typeof tabsEmits\n\nexport default defineComponent({\n  name: 'ElTabs',\n\n  props: tabsProps,\n  emits: tabsEmits,\n\n  setup(props, { emit, slots, expose }) {\n    const ns = useNamespace('tabs')\n\n    const nav$ = ref<TabNavInstance>()\n    const panes = reactive<Record<number, TabsPaneContext>>({})\n    const currentName = ref(props.modelValue || props.activeName || '0')\n\n    const changeCurrentName = (value: TabPanelName) => {\n      currentName.value = value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('tab-change', value)\n    }\n\n    const setCurrentName = async (value: TabPanelName) => {\n      // should do nothing.\n      if (currentName.value === value) return\n\n      try {\n        const canLeave = await props.beforeLeave?.(value, currentName.value)\n        if (canLeave !== false) {\n          changeCurrentName(value)\n\n          // call exposed function, Vue doesn't support expose in typescript yet.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          nav$.value?.removeFocus?.()\n        }\n      } catch {}\n    }\n\n    const handleTabClick = (\n      tab: TabsPaneContext,\n      tabName: TabPanelName,\n      event: Event\n    ) => {\n      if (tab.props.disabled) return\n      setCurrentName(tabName)\n      emit('tab-click', tab, event)\n    }\n\n    const handleTabRemove = (pane: TabsPaneContext, ev: Event) => {\n      if (pane.props.disabled) return\n      ev.stopPropagation()\n      emit('edit', pane.props.name, 'remove')\n      emit('tab-remove', pane.props.name)\n    }\n\n    const handleTabAdd = () => {\n      emit('edit', undefined, 'add')\n      emit('tab-add')\n    }\n\n    watch(\n      () => props.activeName,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(\n      () => props.modelValue,\n      (modelValue) => setCurrentName(modelValue)\n    )\n\n    watch(currentName, async () => {\n      // call exposed function, Vue doesn't support expose in typescript yet.\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      nav$.value?.scrollToActiveTab()\n    })\n\n    {\n      const registerPane = (pane: TabsPaneContext) => (panes[pane.uid] = pane)\n      const unregisterPane = (uid: number) => delete panes[uid]\n\n      provide(tabsRootContextKey, {\n        props,\n        currentName,\n        registerPane,\n        unregisterPane,\n      })\n    }\n\n    expose({\n      currentName,\n    })\n\n    return () => {\n      const newButton =\n        props.editable || props.addable ? (\n          <span\n            class={ns.e('new-tab')}\n            tabindex=\"0\"\n            onClick={handleTabAdd}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (ev.code === EVENT_CODE.enter) handleTabAdd()\n            }}\n          >\n            <ElIcon class={ns.is('icon-plus')}>\n              <Plus />\n            </ElIcon>\n          </span>\n        ) : null\n\n      const header = (\n        <div class={[ns.e('header'), ns.is(props.tabPosition)]}>\n          {newButton}\n          <TabNav\n            ref={nav$}\n            currentName={currentName.value}\n            editable={props.editable}\n            type={props.type}\n            panes={Object.values(panes)}\n            stretch={props.stretch}\n            onTabClick={handleTabClick}\n            onTabRemove={handleTabRemove}\n          />\n        </div>\n      )\n\n      const panels = (\n        <div class={ns.e('content')}>{renderSlot(slots, 'default')}</div>\n      )\n\n      return (\n        <div\n          class={[\n            ns.b(),\n            ns.m(props.tabPosition),\n            {\n              [ns.m('card')]: props.type === 'card',\n              [ns.m('border-card')]: props.type === 'border-card',\n            },\n          ]}\n        >\n          {...props.tabPosition !== 'bottom'\n            ? [header, panels]\n            : [panels, header]}\n        </div>\n      )\n    }\n  },\n})\n","import { buildProps } from '@element-plus/utils'\nimport type { ExtractPropTypes } from 'vue'\nimport type TabPane from './tab-pane.vue'\n\nexport const tabPaneProps = buildProps({\n  label: {\n    type: String,\n    default: '',\n  },\n  name: {\n    type: [String, Number],\n    default: '',\n  },\n  closable: Boolean,\n  disabled: Boolean,\n  lazy: Boolean,\n} as const)\n\nexport type TabPaneProps = ExtractPropTypes<typeof tabPaneProps>\n\nexport type TabPaneInstance = InstanceType<typeof TabPane>\n","<template>\n  <div\n    v-if=\"shouldBeRender\"\n    v-show=\"active\"\n    :id=\"`pane-${paneName}`\"\n    :class=\"ns.b()\"\n    role=\"tabpanel\"\n    :aria-hidden=\"!active\"\n    :aria-labelledby=\"`tab-${paneName}`\"\n  >\n    <slot />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  getCurrentInstance,\n  inject,\n  onMounted,\n  onUnmounted,\n  reactive,\n  ref,\n  useSlots,\n  watch,\n} from 'vue'\nimport { eagerComputed } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { tabPaneProps } from './tab-pane'\n\nconst COMPONENT_NAME = 'ElTabPane'\ndefineOptions({\n  name: 'ElTabPane',\n})\nconst props = defineProps(tabPaneProps)\n\nconst instance = getCurrentInstance()!\nconst slots = useSlots()\n\nconst tabsRoot = inject(tabsRootContextKey)\nif (!tabsRoot)\n  throwError(COMPONENT_NAME, 'usage: <el-tabs><el-tab-pane /></el-tabs/>')\n\nconst ns = useNamespace('tab-pane')\n\nconst index = ref<string>()\nconst isClosable = computed(() => props.closable || tabsRoot.props.closable)\nconst active = eagerComputed(\n  () => tabsRoot.currentName.value === (props.name || index.value)\n)\nconst loaded = ref(active.value)\nconst paneName = computed(() => props.name || index.value)\nconst shouldBeRender = eagerComputed(\n  () => !props.lazy || loaded.value || active.value\n)\n\nwatch(active, (val) => {\n  if (val) loaded.value = true\n})\n\nconst pane = reactive({\n  uid: instance.uid,\n  slots,\n  props,\n  paneName,\n  active,\n  index,\n  isClosable,\n})\n\nonMounted(() => {\n  tabsRoot.registerPane(pane)\n})\n\nonUnmounted(() => {\n  tabsRoot.unregisterPane(pane.uid)\n})\n</script>\n","import { withInstall, withNoopInstall } from '@element-plus/utils'\nimport Tabs from './src/tabs'\nimport TabPane from './src/tab-pane.vue'\n\nexport const ElTabs = withInstall(Tabs, {\n  TabPane,\n})\nexport const ElTabPane = withNoopInstall(TabPane)\nexport default ElTabs\n\nexport * from './src/tabs'\nexport * from './src/tab-bar'\nexport * from './src/tab-nav'\nexport * from './src/tab-pane'\n"],"names":["tabBarProps","buildProps","tabs","type","definePropType","Array","default","mutable","tabsRootContextKey","Symbol","COMPONENT_NAME","instance","rootTabs","ns","barRef","barStyle","getBarStyle","props","tabSize","offset","transform","watch","update","immediate","useResizeObserver","expose","ref","tabNavProps","panes","currentName","String","Number","editable","Boolean","onTabClick","Function","NOOP","onTabRemove","values","stretch","TabNav","defineComponent","name","vm","getCurrentInstance","throwError","useNamespace","visibility","useDocumentVisibility","focused","useWindowFocus","navScroll$","nav$","el$","scrollable","navOffset","isFocus","focusable","sizeName","computed","includes","tabPosition","navStyle","dir","value","scrollPrev","containerSize","capitalize","currentOffset","newOffset","scrollNext","nav","activeTab","navScroll","querySelector","navScrollBounding","maxOffset","isHorizontal","offsetWidth","activeTabBounding","right","top","bottom","max","navSize","prev","currentOffset2","next","e","up","changeTab","EVENT_CODE","down","tabList","nextIndex","code","currentTarget","currentIndex","click","setFocus","focus","setTimeout","scrollToActiveTab","scrollBtn","_createVNode","onUpdated","removeFocus","map","pane","flush","_a","_b","closable","index","btnClose","tabName","ev","tabindex","tabLabelContent","TabBar","tabsProps","activeName","addable","modelValue","beforeLeave","tabsEmits","edit","action","isPanelName","emits","slots","reactive","emit","UPDATE_MODEL_EVENT","setCurrentName","canLeave","changeCurrentName","event","handleTabClick","tab","handleTabAdd","handleTabRemove","registerPane","unregisterPane","header","newButton","tabPaneProps","label","disabled","lazy","tabsRoot","isClosable","active","loaded","paneName","shouldBeRender","uid","onMounted","onUnmounted","ElTabs","withInstall","Tabs","TabPane","ElTabPane","withNoopInstall"],"sourceRoot":""}